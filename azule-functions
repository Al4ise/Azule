#!/bin/bash

# Set Environment Variable
export AZULE=~/Azule

# Add azule commands to PATH
if [ -d "$AZULE" ] ; then
    PATH="$AZULE:$PATH"
fi

function update-azule() {
    currentdir="$PWD"
    cd $AZULE || exit
    while getopts ":fhr" args; do
        case "$args" in
            f) git reset --hard HEAD >> /dev/null ;;

            h)
                echo "Usage: update-azule [options]"
                echo
                echo "Running the command without any arguments will update Azule normally. If"
                echo "you have made changes to any of Azule's files, the update will be cancelled."
                echo
                echo "Options:"
                echo "  -f     Forcefully update Azule, causing all local changes to be lost."
                echo "  -r     Redownload the latest mobilesubstrate and linux toolchains."
                echo "  -h     Print this help menu."
                exit 0
                ;;

            r) rm -rf CydiaSubstrate.framework toolchain ;;

            *)
                echo 'Invalid argument. Run "update-azule -h" to print the help menu.'
                exit 1
            ;;
        esac
    done
    git pull -q
    setup-azule
}

function setup-azule() {
    if [ -z ${currentdir+x} ]; then
        currentdir="$PWD"
    fi
    cd $AZULE || exit
    case $(uname) in
        Darwin)
            if [[ "$(uname -m)" == arm64 || "$(uname -m)" == x86_64 ]]; then

                # CHECK IF XCODE CLI UTILS EXIST
                if ! xcode-select -p 1>/dev/null; then
                    xcode-select --install
                fi

                # Add tools to $PATH
                PATH="$AZULE/bin/darwin:$PATH"
            else
                echo "You don't need to run this script on iOS"
                exit 1
            fi
        ;;

        Linux)
            # GET TOOLCHAIN
            mkdir -p $AZULE/toolchain
            if [ ! "$(ls -A $AZULE/toolchain)" ]; then
                echo "Fetching toolchain..."
                TMP=$(mktemp -d)
                cd "$TMP" || exit
                curl -LO https://github.com/sbingner/llvm-project/releases/latest/download/linux-ios-arm64e-clang-toolchain.tar.lzma
                tar -xf linux-ios-arm64e-clang-toolchain.tar.lzma
                rsync --remove-source-files -a "$TMP"/ios-arm64e-clang-toolchain/* $AZULE/toolchain
                cd $AZULE || exit
                rm -rf "$TMP"
            fi
            # Add tools to $PATH
            PATH="$AZULE/bin/linux:$PATH"
            PATH="$AZULE/toolchain/bin:$PATH"
        ;;
    esac

    if [ ! -d "$AZULE/CydiaSubstrate.framework" ]; then
        echo "Downloading CydiaSubstrate..."
        TMP=$(mktemp -d)
        cd "$TMP" || exit
        curl -sSL "$(curl -sS https://api.parcility.co/db/package/mobilesubstrate/sbingner | jq -r '.data.repo.url + .data.builds[-1].Filename')" -o substrate.deb
        ar -x "substrate.deb"
        tar --lzma --strip-components 3 -xf data.tar.lzma "./Library/Frameworks/CydiaSubstrate.framework" "./usr/lib" "./usr/include"
        rm CydiaSubstrate.framework/CydiaSubstrate CydiaSubstrate.framework/Headers/CydiaSubstrate.h
        mv libsubstrate.dylib CydiaSubstrate.framework/CydiaSubstrate
        mv substrate.h CydiaSubstrate.framework/Headers/CydiaSubstrate.h
        mv CydiaSubstrate.framework $AZULE/CydiaSubstrate.framework
        cd $AZULE || exit
        rm -rf "$TMP"
        plutil -convert binary1 "CydiaSubstrate.framework/Info.plist" || true
        echo "Downloaded CydiaSubstrate.framework"
    fi

    cd "$currentdir" || exit
}
