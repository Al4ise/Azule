#!/bin/bash

shopt -s extglob

# SET INITIAL DIRECTORIES
rootdir="$PWD"
empty_dir="$(mktemp -d)"
cd "$empty_dir" || exit

# SET PLATFORM
case "$(uname -s)" in
    "Linux") os="Linux" ;;
    "Darwin")
        case "$(uname -m)" in
            "arm64"|"x86_64") os="MacOS" ;;
            *) os="iOS" ;;
        esac
    ;;
esac

# PLATFORM-SPECIFIC VARIABLES
case "$os" in
    MacOS)
        # Add tweak tools to PATH
        if [ -d "$AZULE/bin/darwin" ] ; then
            PATH="$AZULE/bin/darwin:$PATH"
        fi
    ;;

    Linux)
        # Add tweak tools to PATH
        if [ -d "$AZULE/bin/linux" ] ; then
            PATH="$AZULE/bin/linux:$PATH"
        fi
        # Add toolchain to PATH
        if [ -d "$AZULE/toolchain/bin" ] ; then
            PATH="$AZULE/toolchain/bin:$PATH"
        fi
    ;;
esac

# PLATFORM-SPECIFIC FUNCTIONS
case "$os" in

    iOS)
        RemovePlistKey () {
            plutil -remove -key "$1" "$2" &>/dev/null
        }

        ReplacePlistValue () {
            plutil -value "$1" -key "$2" "$3" &>/dev/null
        }

        ExtractPlistValue () {
            if ! plutil -key "$1" "$2" >> tmp 2>/dev/null; then
                rm tmp &>/dev/null
                return 1
            fi

            plutil -convert xml1 tmp &>/dev/null

            if [ -n "$3" ]; then
                sed -n "s/.*<key>\(.*\)<\/key>.*/\1/p" tmp
            else
                sed -n "s/.*<string>\(.*\)<\/string>.*/\1/p" tmp
            fi
            rm tmp &>/dev/null
        }

        ExtractDEB () {
            if [ "$2" = "fetch" ]; then
                if [ -z "$silent_run" ]; then echo "Fetching $1..."; fi
                curl -sSL "$(curl -sS https://api.parcility.co/db/package/"$1" | jq -r '.data.repo.url + .data.builds[-1].Filename')" -o "tweak.deb"
                Verbose "Fetched $1" "Couldn't fetch $1" -r
                if [ -z "$silent_run" ]; then echo "Extracting $1..."; fi
                dpkg -x "tweak.deb" "$dir/$tweakid/Tweak"
                Verbose "Extracted $1.deb" "Couldn't extract $1.deb" -r
            else
                if [ -z "$silent_run" ]; then echo "Extracting $(basename "$1")..."; fi
                dpkg -x "$1" "$dir/$tweakid/Tweak"
                Verbose "Extracted $(basename "$1")" "Couldn't extract $(basename "$1")" -r
            fi
        }
    ;;

    MacOS|Linux)
        RemovePlistKey () {
            plutil -remove "$1" "$2" &>/dev/null
        }

        ReplacePlistValue () {
            plutil -replace "$2" -string "$1" "$3" &>/dev/null
        }

        ExtractPlistValue () {
            if [ -n "$3" ]; then
                psed="key"
            else
                psed="string"
            fi
            plutil -extract "$1" xml1 -o - "$2" | sed -n "s/.*<$psed>\(.*\)<\/$psed>.*/\1/p" 2>/dev/null
        }

        ExtractDEB () {
            origin_dir="$PWD"
            TMP=$(mktemp -d)
            cd "$TMP" || exit
            if [ "$2" = "fetch" ]; then
                if [ -z "$silent_run" ]; then echo "Fetching $1..."; fi
                curl -sSL "$(curl -sS https://api.parcility.co/db/package/"$1" | jq -r '.data.repo.url + .data.builds[-1].Filename')" -o "tweak.deb"
                Verbose "Fetched $1" "Couldn't fetch $1" -r -d "$TMP"
                ar -x "tweak.deb"
                Verbose "Extracted $(basename "$1") [ar]" "Couldn't extract $(basename "$1") [ar]" -r -v -d "$TMP"
            else
                ar -x "$1"
                Verbose "Extracted $(basename "$1") [ar]" "Couldn't extract $(basename "$1") [ar]" -r -v -d "$TMP"
            fi
            if [ -z "$silent_run" ]; then echo "Extracting $(basename "$1")..."; fi
            tar -C "$dir/$tweakid/Tweak" -xf data.tar.*
            Verbose "Extracted $(basename "$1")" "Couldn't extract $(basename "$1")"
            cd "$origin_dir" || exit
            rm -rf "$TMP"
        }
    ;;
esac

# FUNCTIONS
Verbose () {
    tv="$?"
    if [ -n "$silent_run" ]; then mute_verbose=1; fi
    for p in "$@"; do
        if [ "$p" == "-v" ] && [ -z "$verbose" ]; then mute_verbose=1; fi

        if [ "$tv" != 0 ]; then 
            if [ -e "$p" ]; then rm -rf "$p"; fi
            if [ "$p" == "-d" ]; then cd "$origin_dir" || exit 1; fi
            if [ "$p" == "-e" ]; then cleanup; fi
            if [ "$p" == "-r" ]; then return 1; fi
        fi
    done

    if [ "$tv" == 0 ]; then
        if [ -z "$mute_verbose" ]; then
            echo "$1"
        fi
    else
        echo "$2"
    fi
}

expand () {
    origin_dir="$PWD"
    cd "$empty_dir" || exit
    process_var="$(echo "${1//\\ / }" | xargs)"
    
    if [[ "$process_var" == .* ]]; then
        process_var="$(echo "$process_var" | sed "s|\.|$rootdir|")"
    fi

    if ! [ -e "$process_var" ]; then
        if [ "$2" == "-f" ]; then
            if [ -f "$rootdir/$process_var" ]; then
                process_var="$rootdir/$process_var"
            fi
        elif [ -n "$process_var" ] && [ -e "$rootdir/$process_var" ]; then
            process_var="$rootdir/$process_var"
        fi
    fi
        
    cd "$origin_dir" || exit
    
    echo "$process_var"
}

cleanup () {
    if [[ "$os" == "iOS" && -e "$dir/$tweakid/bfbackup.plist" ]]; then
        mv "$dir/$tweakid/bfbackup.plist" /var/mobile/Library/Preferences/com.level3tjg.bfdecrypt.plist
    fi
    rm -rf "$dir"
    rm -rf "$empty_dir"
    exit
}

help () {
    echo
    echo "Usage: azule [arguements]"
    echo
    echo "Mandatory Arguements:"
    echo "  -i [Path/BundleID]           Specify the path to the IPA to patch"
    echo "  -o [Path]                    Specify an output directory"
    echo
    echo "Optional Arguements:"
    echo "  -n [Name]                    Specify an Output Name"
    echo "  -f [Paths/Bundle IDs]        Specify the files or tweak Bundle IDs to import"
    echo "  -c [Version]                 Set custom version for output ipa"
    echo "  -b [BundleId]                Set custom BundleID for output ipa"
    echo "  -p [Name]                    Set custom Display Name for output ipa"
    echo "  -u                           Remove UISupportedDevices from app"
    echo "  -v                           Enable Verbose Mode"
    echo "  -s                           Silence Everything But Important Errors"
    echo "  -S                           Fakesigns iPA for use with AppSync"
    echo "  -e                           Removes App Extensions"
    echo "  -w                           Removes Watch App"
    echo "  -r                           Skip Encryption Check"
            
    if [ "$os" == "iOS" ]; then
        echo "  -x [Apple ID] [Password]     Fetch and decrypt iPA"
        echo "  -a [Root Password]           Use APT instead of Parcility (Leave Blank for Default Password)"
        echo "  -g                           Use Flexdecrypt instead of bfdecrypt for decryption"
        echo "  -m                           Enforce Updating Apps Before Decrypting"
        echo "  -l                           Don't Update Outdated Apps"
        echo "  -z                           Don't Update APT Sources (Used With -a)"
    fi
            
    echo
    echo "Examples:"
    echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f ~/Foo.dylib ~/Foo.bundle"
    echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f com.bar.foo -d Foo.dylib"
    echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f ~/Foo.framework com.bar.foo -d Foo.dylib"
    echo
    echo "  -h                           Print this help menu"
    echo
    exit 1

}

# CLEAN ON EXIT
trap "cleanup" SIGINT
trap "cleanup" EXIT

# CLI ARGUEMENTS
while getopts an:i:o:c:b:x:f:d:p:huSewsrmzglv args; do

    # STUFF WITH PARAMETERS
    if [[ "$args" == @(x|a|n|b|p|i|o|c|f) ]]; then
        tmp=( "$OPTARG" )
        until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z "$(eval "echo \${$OPTIND}")" ]; do
            tmp+=( "$(eval "echo \${$OPTIND}")" )
            OPTIND=$((OPTIND + 1))
        done
    fi

    # iOS ONLY
    if [[ "$args" == @(a|x|l|m|g|z) ]]; then
        if [ "$os" != "iOS" ]; then
            echo "-$args is not supported on your platform"
            exit 1
        fi
    fi

    case "$args" in

        # STUFF WITH PARAMETERS
        n) name="${tmp[*]}" ;;
        b) bundle="${tmp[*]}" && run=1 ;;
        p) displayname="${tmp[*]}" && run=1 ;;
        i) ipadir="$(expand "${tmp[*]}" -f)" ;;
        o) outdir="${tmp[*]}" ;;
        c) custom_version="${tmp[*]}" && run=1 ;;
        f) files=( ${tmp[@]} ) && run=1 ;;
        a) root_password="$(echo "${tmp[*]}" | xargs)" && apt=1 ;;
        x) appleid="${tmp[0]}" && unset "tmp[0]" && appleid_password="${tmp[*]}" ;;

        # SWITCHES
        u) remove_uisd=1 && run=1 ;;
        v) verbose="-v" ;;
        e) remove_extensions=1 && run=1 ;;
        w) remove_watchapp=1 && run=1 ;;
        S) fakesign=1 && run=1 ;;
        r) ignore_encrypted=1 ;;
        s) silent_run=1 ;;

        # iOS ONLY SWITCHES
        l) ignore_outdated=1 ;;
        m) force_update=1 ;;
        g) flexdecrypt=1 ;;
        z) no_apt_update=1 ;;
        
        h) help ;;
        *) echo "Invalid option: $*. Run "azule -h" for help" && exit 1 ;;
    esac
done

# READING OUTPUT DIRECTORY
if [ -z "$outdir" ]; then while
    printf 'Output Directory: '
    read -r outdir
    [ -z "$outdir" ] && echo "No Output Directory Specified"
do true; done; fi

# READING IPA
if [ -z "$ipadir" ]; then while
    printf 'Path to IPA: '
    read -r tmp
    ipadir="$(expand "$tmp")"
    [ -z "$ipadir" ] && echo "No iPA Specified"
do true; done; fi


if [ ! -e "$ipadir" ]; then
    if [ "$os" != "iOS" ]; then
        echo "Invalid iPA"
        exit 1
    else
        # CHECK IF APP IS ON THE APP STORE
        latestv="$(curl -s "http://itunes.apple.com/lookup?bundleId=$ipadir" | jq -r '.results[].version')"
    
        if [ -z "$latestv" ]; then

            # CHECK IF APP IS INSTALLED

            while read -r i; do
                if [ "$(ExtractPlistValue MCMMetadataIdentifier "$i")" = "$ipadir" ]; then
                    status=1
                    break
                fi
            done < <(find /var/containers/Bundle/Application -name .com.apple.mobile_container_manager.metadata.plist)

            if [ -z "$status" ]; then
                echo "Invalid App"
                exit 1
            fi
            ignore_outdated=2
        fi
        drun=1
    fi
fi

# GUI
if [[ -z "$run" && -z "$drun" ]]; then
    PS3=$'Choose Arguements: '
    arguements=(
    "Inject Tweaks"
    "Change Display Name"
    "Change App Version"
    "Change BundleID"
    "Remove UISupportedDevices"
    "Fakesign iPA"
    "Remove App Extensions"
    "Remove Watch App"
    "Run With Verbose Mode"
    "Set Custom Output Name"
    "Skip Encryption Check"
    )

    if [ "$os" == "iOS" ]; then
        arguements+=(
        "Do Not Update Outdated Apps"
        "Force Update Apps"
        "Decrypt Apps through Flexdecrypt"
        "Use APT instead of Parcility"
        "Don't Update APT Sources"
        )
    fi

    arguements+=( "Done" )
    select i in "${arguements[@]}"; do
        case "$i" in
            "Inject Tweaks")
                if [ -z "$files" ]; then while
                    printf 'Files or Tweak IDs: '
                    read -r tmp
                    files=( $tmp )
                    [ -z "$files" ] && echo "No Files Provided"
                do true; done; fi
                run=1
            ;;

            "Set Custom Output Name")
                if [ -z "$name" ]; then while
                    printf 'New Display Name: '
                    read -r name
                    [ -z "$name" ] && echo "No Display Name Provided"
                do true; done; fi
            ;;

            "Change Display Name")
                if [ -z "$displayname" ]; then while
                    printf 'New Display Name: '
                    read -r displayname
                    [ -z "$displayname" ] && echo "No Display Name Provided"
                do true; done; fi
                run=1
            ;;

            "Change App Version")
                if [ -z "$custom_version" ]; then while
                    printf 'New Version: '
                    read -r custom_version
                    [ -z "$custom_version" ] && echo "No Version Provided"
                do true; done; fi
                run=1
            ;;

            "Change BundleID")
                if [ -z "$bundle" ]; then while
                    printf 'New BundleID: '
                    read -r bundle
                    [ -z "$bundle" ] && echo "No BundleID Provided"
                do true; done; fi
                run=1
            ;;

            "Remove UISupportedDevices")
                remove_uisd=1
                run=1
            ;;

            "Use APT instead of Parcility")
                apt=1
                if [ -z "$root_password" ]; then
                    printf 'Root Password (Leave Empty for Default): '
                    read -r -s tmp
                    root_password="$tmp"
                fi
            ;;

            "Fakesign iPA")
                fakesign=1
                run=1
            ;;

            "Skip Encryption Check") ignore_encrypted=1 ;;
            "Do Not Update Outdated Apps") ignore_outdated=1 ;;
            "Don't Update APT Sources") no_apt_update=1 ;;
            "Force Update Apps") force_update=1 ;;
            "Decrypt Apps through Flexdecrypt") flexdecrypt=1 ;;
            "Run With Verbose Mode") verbose="-v" ;;

            "Remove Watch App")
                remove_watchapp=1
                run=1
            ;;

            "Remove App Extensions")
                remove_extensions=1
                run=1
            ;;

            "Done") break ;;
        esac
    done
fi

# VARIABLE CHECK
if ! [[ -n "$run" || -n "$drun" ]]; then
    echo "Insufficient Arguements"
    echo "Run "azule -h" for usage instructions"
    exit 1
fi

# SETTING OUTPUT DIRECTORY AND NAME
outdir="$(expand "$outdir")"
if [ ! -d "$outdir" ]; then
    if [ "${outdir: -4}" == ".ipa" ]; then
        output="$outdir"
    else
        if [ -z "$name" ]; then
            name="$(basename "$ipadir" .ipa)"
            for i in "${files[@]}"; do
                name+="+$(basename "$i")"
            done
        fi
        output="$outdir/$name.ipa"
    fi
else
    if [ -z "$name" ]; then
        name="$(basename "$ipadir")"
        for i in "${files[@]}"; do
            name+="+$(basename "$i")"
        done
    fi
    output="$outdir/$name.ipa"
fi

# CREATING OUTPUT DIRECTORY
mkdir -p "$(dirname "$output")"
test -w "$(dirname "$output")"
Verbose "iPA will be written to $output" "$output is an invalid output path" -v -e

# CREATING .TMP DIRECTORIES
dir="$(mktemp -d)"

tweakid="$RANDOM"
mkdir -p "$dir/$tweakid/Tweak"
Verbose "$dir/$tweakid/Tweak has been created" "Couldn't create $dir/$tweakid/Tweak" -v -e

cd "$dir/$tweakid" || exit

# DECRYPTION
if [ -n "$drun" ]; then

    # GET BINARY
    
    while read -r i; do
        if [ "$(ExtractPlistValue MCMMetadataIdentifier "$i")" = "$ipadir" ]; then
            bfplist="$(find "$(dirname "$i")"/*.app/ -maxdepth 1 -name Info.plist)"
            bfbinary="$(dirname "$bfplist")/$(ExtractPlistValue CFBundleExecutable "$bfplist")"
            break
        fi
    done < <(find /var/containers/Bundle/Application -name .com.apple.mobile_container_manager.metadata.plist)

    currentv="$(ExtractPlistValue CFBundleVersion "$bfplist")"

    if [ -n "$currentv" ]; then ignore_outdated+=1; fi

    # INSTALL APP UPDATES
    if [ "$ignore_outdated" != "2" ]; then
        if [[ "$latestv" != "$currentv" && "$ignore_outdated" != "11" ]] || [ -n "$force_update" ]; then

            # VARIABLE CHECK
            if [ -z "$appleid" ]; then while
                printf 'Apple ID: '
                read -r appleid
                [ -z "$appleid" ] && echo "No Apple ID Provided"
            do true; done; fi

            if [ -z "$appleid_password" ]; then while
                printf 'Password for Apple ID: '
                read -r -s appleid_password
                [ -z "$appleid_password" ] && echo "No Password Provided"
            do true; done; fi

            if ! ipatool-azule download -b "$ipadir" -e "$appleid" -p "$appleid_password"; then exit 1; fi
        
            appinst "$dir/$tweakid"/*.ipa
        fi
    fi

    if [ -n "$flexdecrypt" ]; then

        # FLEXDECRYPT

        while read -r i; do
            if [ "$(ExtractPlistValue MCMMetadataIdentifier "$i")" = "$ipadir" ]; then
                if [ -z "$silent_run" ]; then echo "Preparing App..."; fi
                mkdir -p Payload
                rsync -a "$(dirname "$i")"/*.app Payload
                unzipped=1
                break
            fi
        done < <(find /var/containers/Bundle/Application -name .com.apple.mobile_container_manager.metadata.plist)
    
        if [ -z "$unzipped" ]; then
            echo "Couldn't find app"
            exit 1
        fi
    
        # REMOVING PLUGINS
        if [ -n "$remove_extensions" ]; then
            if [ -z "$silent_run" ]; then echo "Removing Extensions..."; fi
            while read -r i; do rm -rf "$i"; done < <(find "$dir/$tweakid" -mindepth 3 -type d -name PlugIns)
            Verbose "Removed Extensions" "Couldn't Remove Extensions"
            remove_extensions=2
        fi

        if [ -z "$silent_run" ]; then echo "Removing Watch App..."; fi
        find "$dir/$tweakid" -mindepth 3 -maxdepth 3 -type d -name Watch -exec rm -rf "{}" \;
        Verbose "Removed Watch App" "Couldn't Remove Watch App"
        remove_watchapp=2

        while read -r i; do
            CFBundleExecutable="$(ExtractPlistValue CFBundleExecutable "$i")"
            if [ -n "$CFBundleExecutable" ] && [ "$(otool -l "$(dirname "$i")/$CFBundleExecutable" | grep "cryptid 1")" ]; then
                if [ -z "$ran" ]; then
                    if [ -z "$silent_run" ]; then echo "Decrypting App..."; fi
                fi

                flexdecrypt "$(dirname "$i")/$CFBundleExecutable" --output "$(dirname "$i")/$CFBundleExecutable" &>/dev/null
                Verbose "Decrypted $CFBundleExecutable" "Couldn't Decrypt $CFBundleExecutable" -v
                ran=1
            fi
        done < <(find Payload/*.app -name "Info.plist")
    
        if [ -z "$silent_run" ]; then
            if [ -n "$ran" ]; then
                echo "Decrypted App"
            else
                echo "App Was Not Encrypted"
            fi
        fi
    else
    
        # BFDECRYPT
        
        while read -r i; do
            if [ "$(ExtractPlistValue MCMMetadataIdentifier "$i")" = "$ipadir" ]; then
                bfipadir="$(dirname "$i")/Documents/decrypted-app.ipa"
                break
            fi
        done < <(find /var/mobile/Containers/Data/Application -name .com.apple.mobile_container_manager.metadata.plist 2>/dev/null)

        # PRE CLEANUP
        find /var/mobile/Containers/Data/Application/ -name decrypted-app.ipa -exec rm -rf "{}" \; &>/dev/null

        # BFDECRYPT SETUP
        if ! [[ "$(ExtractPlistValue selectedApplications /var/mobile/Library/Preferences/com.level3tjg.bfdecrypt.plist key)" =~ $ipadir ]]; then
            cp /var/mobile/Library/Preferences/com.level3tjg.bfdecrypt.plist "$dir/$tweakid/bfbackup.plist"
            plutil -key selectedApplications -array /var/mobile/Library/Preferences/com.level3tjg.bfdecrypt.plist >/dev/null
            plutil -value "$ipadir" -arrayadd -key selectedApplications /var/mobile/Library/Preferences/com.level3tjg.bfdecrypt.plist >/dev/null
        fi

        # KILL APP
        PID=$(ps awwwx|grep "$bfbinary"|grep container|grep '.app'|grep -v grep|sed 's/^\ *//g'|cut -f1 -d\ )
        if [ -n "$PID" ]; then
            kill -9 "$PID"
        fi

        # LAUNCH APP
        open "$ipadir"

        # WAIT FOR IPA
        until [ -e "$bfipadir" ]; do :; done
        while [ -d "$(dirname "$bfipadir")/ipa" ]; do :; done

        # KILL APP
        PID=$(ps awwwx|grep "$bfbinary"|grep container|grep '.app'|grep -v grep|sed 's/^\ *//g'|cut -f1 -d\ )
        kill -9 "$PID" &>/dev/null

        # SET NEW IPADIR
        ipadir="$bfipadir"

        # CLEANUP
        if [ -e "$dir/$tweakid/bfbackup.plist" ]; then
            mv "$dir/$tweakid/bfbackup.plist" /var/mobile/Library/Preferences/com.level3tjg.bfdecrypt.plist
        fi
    fi
fi

# VERBOSE
if [ -z "$silent_run" ] && [ -n "$verbose" ]; then
    if [[ -n "$unzipped" || -n "$bfipadir" ]]; then
        echo "Decrypted $ipadir"
    else
        echo "Path to iPA is $ipadir"
    fi
fi

# EXTRACTING IPA
if [[ -n "$run" && -z "$unzipped" ]]; then
    if [ -z "$silent_run" ]; then echo "Extracting iPA..."; fi
    unzip -q "$ipadir" -d "$dir/$tweakid"
    Verbose "IPA extracted" "Couldn't extract IPA" -e
fi

if [ -z "$bfipadir" ]; then
    rm -rf "$bfipadir"
fi

# REMOVING PLUGINS
if [ "$remove_extensions" == "1" ]; then
    if [ -z "$silent_run" ]; then echo "Removing Extensions..."; fi
    while read -r i; do
        rm -rf "$i"
    done < <(find "$dir/$tweakid" -mindepth 3 -type d -name PlugIns)
    Verbose "Removed Extensions" "Couldn't Remove Extensions"
fi

# REMOVING WATCH APP
if [ "$remove_watchapp" == "1" ] || [ -n "$bfipadir" ]; then
    if [ -z "$silent_run" ]; then echo "Removing Watch App..."; fi
    find "$dir/$tweakid" -mindepth 3 -maxdepth 3 -type d -name Watch -exec rm -rf "{}" \;
    Verbose "Removed Watch App" "Couldn't Remove Watch App"
fi

# GETTING APP NAME
appname="$(basename Payload/*.app)"

# GETTING APP EXECUTABLE
executable="Payload/$appname/$(ExtractPlistValue CFBundleExecutable Payload/"$appname"/Info.plist)"
Verbose "App executable is $executable" "Couldn't set app executable" -v -e

# ENCRYPTION CHECK
if [ -z "$ignore_encrypted" ]; then
    while read -r i; do
        CFBundleExecutable="$(ExtractPlistValue CFBundleExecutable "$i")"
        if [ -n "$CFBundleExecutable" ] && [ -n "$(otool -l "$(dirname "$i")/$CFBundleExecutable" | grep "cryptid 1")" ]; then
            if [[ "$(dirname "$i")/$CFBundleExecutable" =~ .app/Frameworks || "$(dirname "$i")/$CFBundleExecutable" == "$executable" ]]; then
                echo "Fatal Error: $(dirname "$i")/$CFBundleExecutable is encrypted"
                exit 1
            elif [ -z "$silent_run" ] && [ -n "$verbose" ]; then
                echo "$(dirname "$i")/$CFBundleExecutable is encrypted. This may cause problems later on"
            fi
        fi
    done < <(find Payload/"$appname" -name "Info.plist")
fi

# PROCESSING FILES
if [ -n "$files" ]; then

    max="${#files[@]}"
    for i in "${!files[@]}"; do
        x="$i"
        unset "indexes[@]"
        while [[ "$x" -le "$max" ]]; do
            indexes+=( "$x" )
            string+=" ${files[x]}"
            if [ -e "$(expand "$string")" ] && [[ -z "${files[x+1]}" || ! -e "$(expand "$string ${files[x+1]}")" ]]; then
                # VERBOSE
                if [ -z "$silent_run" ] && [ -n "$verbose" ]; then
                    echo "$(expand "$string") will be imported"
                fi

                case "$(expand "$string")" in
                    *.deb) ExtractDEB "$(expand "$string")" ;;

                    *.dylib)
                        rsync -a "$(expand "$string")" "$dir/$tweakid/Tweak"
                        Verbose "Copied $(basename "$(expand "$string")") to work directory" "Couldn't Copy $(basename "$i") to work directory" -v
                    ;;

                    *.framework)
                        rsync -a "$(expand "$string")" "$dir/$tweakid/Tweak"
                        Verbose "Moved $(basename "$(expand "$string")") to work directory" "Couldn't Move $(basename "$i") to work directory" -v
                    ;;

                    *)
                        rsync -a "$(expand "$string")" Payload/"$appname"
                        Verbose "Moved $(basename "$(expand "$string")") to app directory" "Couldn't Move $(basename "$i") to app directory"
                    ;;
                esac
                unset string
                for g in "${indexes[@]}"; do
                    unset "files[g]"
                done
                unset "indexes[@]"
            fi
            x=$((x + 1))
        done
    done

    
    for i in "${files[@]}"; do
    
        # FETCHING DEBS
        if [ "$os" == "iOS" ] && [ -n "$apt" ]; then
            if [ -z "$rcount" ]; then
            
                # SET ROOT PASSWORD
                if [ -z "$root_password" ]; then
                    root_password="alpine"
                fi
                    
                if [ -z "$no_apt_update" ]; then
                    if [ -z "$silent_run" ]; then echo "Updating Sources..."; fi
                    echo "$root_password" | sudo -S apt-get update --allow-insecure-repositories &>/dev/null
                    Verbose "Successfully Refreshed Sources" "Couldn't Refresh Sources"
                fi
                
                while read -r g; do echo "$root_password" | sudo -S rm -rf "$g"; done < <(find "/var/cache/apt/archives" -maxdepth 1 -iname '*.deb')
            fi
            rcount=1
            if [ -z "$silent_run" ]; then echo "Fetching $i"; fi
            echo "$root_password" | sudo -S apt-get install --download-only "$i" -y --allow-unauthenticated &>/dev/null
            Verbose "Fetched $i" "Couldn't Fetch $i"
            
            while read -r g; do
                ExtractDEB "$g"
                echo "$root_password" | sudo -S rm -rf "$g"
            done < <(find "/var/cache/apt/archives" -maxdepth 1 -iname '*.deb')
        elif [ "$(curl -sS https://api.parcility.co/db/package/"$i" | jq -r .status)" = "true" ]; then
            ExtractDEB "$i" fetch
        else
            echo "$i couldn't be found"
            exit
        fi
    done

    # SPECIFYING DYLIBS
    while read -r i; do dylibs+=("$i"); done < <(find "$dir/$tweakid/Tweak" ! -type l -iname '*.dylib' ! -path '*.bundle/*' ! -path '*.framework/*')

    # DYLIB SELECTION
    for i in "${dylibs[@]}"; do
        if ! [ -e "${i%.*}.plist" ]; then
            inject+=( "$(basename "$i")" )
        else
            identifier="$(ExtractPlistValue Filter "${i%.*}".plist)"
            idtype="$(ExtractPlistValue Filter "${i%.*}".plist key)"

            case "$idtype" in
                Bundles)
                    ipabundleid="$(ExtractPlistValue CFBundleIdentifier Payload/"$appname"/Info.plist)"
                    
                    if [[ "$identifier" =~ $ipabundleid ]]; then
                        inject+=( "$(basename "$i")" )
                    fi
                ;;

                Executables)
                    if [[ "$identifier" =~ $(basename "$executable") ]]; then
                        inject+=( "$(basename "$i")" )
                    fi
                ;;
                
            esac
        fi
    done

    # INJECTING DYLIBS
    for i in "${inject[@]}"; do
        find "$dir/$tweakid/Tweak" ! -type l -name "$i" ! -path '*.bundle/*' ! -path '*.framework/*' -exec rsync -a {} Payload/"$appname"/Frameworks \;
        Verbose "Copied $(basename "$i") to app directory" "$(basename "$i") couldn't be copied to app directory" -v

        insert_dylib --inplace --weak --all-yes @rpath/"$i" "$executable" &> /dev/null
        Verbose "Injected $i" "Couldn't inject $i"
    done

    # MOVING BUNDLES
    while read -r i; do
        rsync -a "$i" Payload/"$appname"/
        Verbose "Copied $(basename "$i") to app directory" "$(basename "$i") couldn't be copied to app directory"
    done < <(find "$dir/$tweakid/Tweak" ! -type l -iname '*.bundle' ! -path '*.bundle/*' ! -path '*.framework/*')

    # MOVING FRAMEWORKS TO APP DIRECTORY
    while read -r i; do
        if [ -e "$i/Info.plist" ]; then
            rsync -a "$i" Payload/"$appname"/Frameworks
            Verbose "Copied $(basename "$i") to app directory" "$(basename "$i") couldn't be copied to app directory"
            inject+=( "$(basename "$i")/$(ExtractPlistValue CFBundleExecutable "$i/Info.plist")" )
        fi
    done < <(find "$dir/$tweakid/Tweak" ! -type l -iname '*.framework' ! -path '*.bundle/*' ! -path '*.framework/*')

    # FIXING LINKS
    for i in "${inject[@]}"; do
        ldid -r Payload/"$appname"/Frameworks/"$i"
        Verbose "Codesign stripped from $i" "Couldn't strip codesign from $i" -v -e

        while read -r p; do links+=("$p"); done < <(otool -L Payload/"$appname"/Frameworks/"$i" | sort -u | cut -d ' ' -f1)
        for l in "${links[@]}"; do
            for x in "${inject[@]}"; do
                if [[ "$l" =~ $x ]]; then
                    if [[ "$l" =~ $i ]]; then
                        install_name_tool -id @rpath/"$i" Payload/"$appname"/Frameworks/"$i" &>/dev/null
                        tid=$(( tid + $? ))
                        break
                    else
                        install_name_tool -change "$l" @rpath/"$x" Payload/"$appname"/Frameworks/"$i" &>/dev/null
                        tlnk=$(( tlnk + $? ))
                        break
                    fi
                fi
            done
        done
    done

    # VERBOSE
    if [ -z "$silent_run" ]; then
        if [[ "$tid" = 0 || -z "$tid" ]]; then
            echo "ID Successful"
        else
            echo "$tid file(s) failed to ID"
        fi

        if [[ "$tlnk" = 0 || -z "$tlnk" ]]; then
            echo "Re-Link Successful"
        else
            echo "$tlnk Re-Links failed"
        fi
    fi

    # INJECT HOOKING LIBRARY
    hookinglibrary="CydiaSubstrate.framework"

    if [ "$os" == "iOS" ]; then
        rsync -a "/var/mobile/Azule/$hookinglibrary" Payload/"$appname"/Frameworks
    elif ! rsync -a "$AZULE/$hookinglibrary" Payload/"$appname"/Frameworks &>/dev/null; then
        echo "Hooking Library not downloaded, please run setup-azule."
        exit 1
    fi

    if [ -d Payload/"$appname"/Frameworks/"$hookinglibrary" ]; then
        hookinglibrary="$hookinglibrary/$(ExtractPlistValue CFBundleExecutable Payload/"$appname"/Frameworks/"$hookinglibrary"/Info.plist)"
    fi

    for i in "${inject[@]}"; do
        while read -r q; do links+=("$q"); done < <(otool -L Payload/"$appname"/Frameworks/"$i" | sort -u | cut -d ' ' -f1)
        for l in "${links[@]}"; do
            if [[ "$l" =~ CydiaSubstrate.framework/CydiaSubstrate || "$l" =~ libsubstrate.dylib || "$l" =~ libsubstitute.dylib ]]; then
                install_name_tool -change "$l" @rpath/"$hookinglibrary" Payload/"$appname"/Frameworks/"$i" &>/dev/null
                status=$(( status + $? ))
                break
            fi
        done
    done

    # VERBOSE
    if [ -z "$silent_run" ]; then
        if [[ "$status" = 0 || -z "$status" ]]; then
            echo "Successfully injected $hookinglibrary"
        else
            echo "Failed injecting $hookinglibrary in $status file(s)"
        fi
    fi
fi

# REMOVING UISUPPORTEDDEVICES

if [ -n "$remove_uisd" ]; then
    UISupportedDevices="$(ExtractPlistValue UISupportedDevices Payload/"$appname"/Info.plist)"
    if [ -n "$UISupportedDevices" ]; then
        RemovePlistKey UISupportedDevices Payload/"$appname"/Info.plist
        Verbose "Removed UISupportedDevices from app" "Couldn't remove UISupportedDevices from app"
    else
        if [ -z "$silent_run" ]; then echo "The specified iPA doesn't have UISupportedDevices"; fi
    fi
fi

# CHANGING BUNDLEID

if [ -n "$bundle" ]; then
    ReplacePlistValue "$bundle" CFBundleIdentifier Payload/"$appname"/Info.plist
    Verbose "Changed App BundleID to $bundle" "Couldn't Change App BundleID"
fi

# CHANGING DISPLAY NAME

if [ -n "$displayname" ]; then
    ReplacePlistValue "$displayname" CFBundleDisplayName Payload/"$appname"/Info.plist
    Verbose "Changed App Display Name to $displayname" "Couldn't Change App Display Name"
fi

# CHANGING VERSION

if [ -n "$custom_version" ]; then
    ReplacePlistValue "$custom_version" CFBundleVersion Payload/"$appname"/Info.plist
    ReplacePlistValue "$custom_version" CFBundleShortVersionString Payload/"$appname"/Info.plist
    Verbose "Changed App Version to $custom_version" "Couldn't Change App Version"
fi

# FAKESIGNING

if [ -n "$fakesign" ]; then
    if [ -z "$silent_run" ]; then echo "Fakesigning iPA..."; fi
    ldid -S -M Payload/* &>/dev/null
    Verbose "Fakesigned iPA" "Couldn't Fakesign iPA"
fi

# WRAPPING UP

if [ -n "$run" ] || [ -n "$unzipped" ]; then
    if [ -z "$silent_run" ]; then echo "Generating iPA..."; fi
    zip -rq "$output" Payload
else
    mv "$ipadir" "$output"
fi
Verbose "Generated IPA at $output" "Couldn't generate IPA"

cleanup
