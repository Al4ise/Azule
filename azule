#!/bin/zsh

# ARGUEMENTS
while getopts :n:i:o:f:d:hu args; do
    case "$args" in
        n)
            name="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                name+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
            ;;
            
        i)
            ipadir="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                ipadir+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
            ;;
            
        o)
            outdir="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                outdir+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
            ;;
            
        f)
            ff="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                ff+=" "$(eval "echo \${$OPTIND}")""
                OPTIND=$((OPTIND + 1))
            done
            (){ local IFS=$'\n'; files=( $(eval "echo $ff" | sed "s/, /\n/g") ); }
            ;;
            
        d)
            dylibs=("$OPTARG")
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                dylibs+=($(eval "echo \${$OPTIND}"))
                OPTIND=$((OPTIND + 1))
            done
            ;;
            
        u) u=1 ;;
        
        h)
            echo "Usage: azule [options]"
            echo
            echo "Running the command without any arguments will enter GUI mode."
            echo
            echo "GUI mode usage: "
            echo "  1. Run azule in any terminal window to initialize"
            echo "  2. Provide your project's name"
            echo "  3. Provide the path to a \u001b[1mdecrypted\u001b[0m IPA of the app you are trying to modify."
            echo "  \u001b[1mEncrypted IPAs don't work\u001b[0m"
            echo "  4. When asked for Files or Tweak Bundle IDs, you can either provide the local"
            echo "  paths to the files you wish to inject or type the Bundle IDs of the tweaks"
            echo "  (This only works if the tweaks can be found on Parcility)"
            echo "  5. If you provided a tweak, choose the dylibs to inject"
            echo "  (You can choose not to inject any dylibs)"
            echo
            echo "Options:"
            echo "  -n [Name]                Specify the project name."
            echo "  -i [Path]                Specify the path to the IPA to patch."
            echo "  -o [Path]                Specify an output directory."
            echo "  -f [Paths/Bundle IDs]    Specify the files or tweak Bundle IDs to import."
            echo "  -d [Names]               From the .deb files imported, specify the names of the dylibs (e.g: Foo.dylib) to inject."
            echo "  -h                       Print this help menu."
            echo "  -u                       Remove UISupportedDevices from Info.plist"
            echo
            echo "Examples:"
            echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f ~/Foo.dylib, ~/Foo.bundle"
            echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f com.bar.foo -d Foo.dylib"
            echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f ~/Foo.framework com.bar.foo -d Foo.dylib"
            exit 1
            ;;
        *)
            echo 'Invalid argument. Run "azule -h" to print the help menu.'
            exit 1
            ;;
    esac
done

# DECLARE $NAME
if [ -z "$name" ]; then; while
    printf 'Project Name: '
    read name
    [ -z "$name" ] && echo "Nice try. Now name your project."
do true; done; fi

# GET IPA
if [ -z "$ipadir" ]; then; while
    printf 'Path to IPA: '
    read ipa
    ipadir=$(eval "echo \$ipa")
    [ -z "$ipadir" ] && echo "I need the IPA to make your app."
do true; done; fi

# OUTPUT DIRECTORY
if [ -z "$outdir" ]; then; while
    printf 'Output Directory: '
    read out
    outdir=$(eval "echo $out")
    [ -z "$outdir" ] && echo "I don't want to keep the app for myself."
do true; done; fi

# GET FILES
if [ -z "$files" ]; then; while
    printf 'Files or Tweak IDs: '
    read ff
    (){ local IFS=$'\n'; files=( $(eval "echo $ff" | sed "s/, /\n/g") ); }
    [ -z "$files" ] && echo "If you don't want to inject anything, then just use the IPA you gave me."
do true; done; fi

# OUTPUT DIRECTORY #2
tweakname=$(basename "$name")
output=$(echo "$outdir/$name" | sed "s/"$tweakname"//g")
if ! [[ -d "$output" ]]; then
    mkdir -p "$output"
fi

# .TMP DIRECTORIES
dir=$AZULE/.tmp
mkdir -p "$dir/$tweakname/Tweak"
cd "$dir/$tweakname"

# EXTRACT IPA
eval "unzip -q '$ipadir' -d "$dir/'$tweakname'""
executable="Payload/$(basename Payload/*.app)/$(plutil -extract CFBundleExecutable xml1 -o - Payload/*.app/Info.plist | sed -n "s/.*<string>\(.*\)<\/string>.*/\1/p")"

for i in "${files[@]}"; do
    if [[ -f "$i" || -d "$i" ]]; then
        case "$i" in
            *.deb)
            mkdir -p ar
            cd ar
            ar -x "$i"
            tar -C "$dir/$tweakname/Tweak" -xf data.tar.*
            cd "$dir/$tweakname"
            rm -rf ar
            ;;
            
            *.dylib)
                rsync -a "$i" Payload/*.app/Frameworks
                $AZULE/insert_dylib --inplace --all-yes "@rpath/$(basename "$i")" "$executable" >> /dev/null
                chain+=( $(basename "$i") )
                ;;

            *.framework)
                rsync -a "$i" Payload/*.app/Frameworks
                chain+=( "$(basename "$i")/$(plutil -extract CFBundleExecutable xml1 -o - "$i"/Info.plist | sed -n "s/.*<string>\(.*\)<\/string>.*/\1/p")" )
                ;;
            
            *) rsync -a "$i" Payload/*.app ;;
        esac
    else
        if [ "$(curl -sS "https://api.parcility.co/db/package/$i" | jq -r '.status')" = "true" ]; then
            mkdir -p ar
            cd ar
            curl -sSL "$(curl -sS "https://api.parcility.co/db/package/$i" | jq -r '.data.repo.url + .data.builds[-1].Filename')" -o "$i.deb"
            
            ar -x "$i.deb"
            tar -C "$dir/$tweakname/Tweak" -xf data.tar.*
            cd "$dir/$tweakname"
            rm -rf ar
        else
            echo ""$i" isn't available on Parcility. Try getting the files manually. "
            exit
        fi
    fi
done

# SPECIFY DYLIBS
if [ -z "$dylibs" ]; then
    if [ -n "$(ls -A "$dir"/"$tweakname"/Tweak 2>/dev/null)" ]; then
        export COLUMNS=1
        dylibs=( $(find -E "$dir"/"$tweakname"/Tweak -iname '*.dylib' -exec basename {} \;) 'Done' )
        echo $'Available Dylibs: '
        PS3=$'Choose Dylibs (recommended): '
        select i in "${dylibs[@]}"; do
            if [ "$i" = "Done" ]; then; break
            else
                find -E "$dir"/"$tweakname"/Tweak -iname "$i" -exec rsync -a {} Payload/*.app/Frameworks \;
                $AZULE/insert_dylib --inplace --all-yes "@rpath/$i" "$executable" >> /dev/null
                chain+=( "$i" )
            fi
        done
    fi
else
    for i in "${dylibs[@]}"; do
        find -E "$dir"/"$tweakname"/Tweak -iname "$i" -exec rsync -a {} "$dir"/"$tweakname"/Payload/*.app/Frameworks \;
        $AZULE/insert_dylib --inplace --all-yes "@rpath/$i" "$executable" >> /dev/null
        chain+=( "$i" )
    done
fi

# MOVE BUNDLES
find -E "$dir"/"$tweakname"/Tweak -iname '*.bundle' ! -iregex '.*\.(bundle)/.+' -exec rsync -a {} Payload/*.app \;

# FIX LINKS
rsync -a $AZULE/CydiaSubstrate.framework Payload/*.app/Frameworks
chain+=( CydiaSubstrate.framework/CydiaSubstrate )

find -E "$dir/$tweakname/Tweak" -iname '*.framework' | while read i; do
    rsync -a "$i" Payload/*.app/Frameworks
    
    chain+=( "$(basename "$i")/$(plutil -extract CFBundleExecutable xml1 -o - "$i"/Info.plist | sed -n "s/.*<string>\(.*\)<\/string>.*/\1/p")" )
done

for i in "${chain[@]}"; do
    codesign --remove-signature Payload/*.app/Frameworks/"$i"
    links=( $(otool -L Payload/*.app/Frameworks/"$i" | cut -d ' ' -f1) )
    for u in "${links[@]}"; do
        for x in "${chain[@]}"; do
            if [[ "$u" =~ "$x" ]]; then
                install_name_tool -change "$u" @rpath/"$x" Payload/*.app/Frameworks/"$i"
                break
            fi
        done
    done
done

if [ -z "$u" ]; then
    plutil -remove UISupportedDevices Payload/*.app/Info.plist >> /dev/null
fi

# WRAPPING UP
eval "zip -rqX '$output/$tweakname.ipa' Payload"
rm -rf "$dir"
