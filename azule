#!/bin/bash

# SET PLATFORM

case "$(uname -s)" in
    "Linux") os="Linux" ;;
    "Darwin")
        case "$(uname -m)" in
            "arm64"|"x86_64") os="MacOS" ;;
            *) os="iOS" ;;
        esac
    ;;
esac

# PLATFORM-SPECIFIC VARIABLES

case "$os" in
    
    iOS)
        jq="jq"
        insert_dylib="insert_dylib"
        plutil="plutil"
        ar="ar"
        otool="otool"
        install_name_tool="install_name_tool"
        ldid="ldid"
        azule="/var/mobile/Documents/Azule"
    ;;
    
    MacOS)
        jq="$AZULE/usr/bin/jq"
        insert_dylib="$AZULE/usr/bin/insert_dylib"
        plutil="plutil"
        ar="ar"
        otool="otool"
        install_name_tool="install_name_tool"
        ldid="$AZULE/usr/bin/ldid"
        azule="$AZULE"
    ;;
    
    Linux)
        jq="jq"
        insert_dylib="$AZULE/usr/bin/insert_dylib_linux"
        plutil="$AZULE/usr/bin/plutil"
        ar="$AZULE/toolchain/usr/bin/ar"
        otool="$AZULE/toolchain/usr/bin/otool"
        install_name_tool="$AZULE/toolchain/usr/bin/install_name_tool"
        ldid="$AZULE/toolchain/usr/bin/ldid"
        azule="$AZULE"
    ;;
esac

# PLATFORM-SPECIFIC FUNCTIONS

case "$os" in

    iOS)
    
        RemovePlistKey () {
            "$plutil" -remove -key $1 $2 &>/dev/null
        }
    
        ReplacePlistValue () {
            "$plutil" -value $1 -key $2 $3 &>/dev/null
        }
    
        ExtractPlistValue () {
            "$plutil" -key "$1" "$2" >> tmp 2>/dev/null
            if [ "$?" != "0" ]; then
                rm tmp &>/dev/null
                return 1
            fi
            "$plutil" -convert xml1 tmp &>/dev/null
        
            sed -n "s/.*<"$3">\(.*\)<\/"$3">.*/\1/p" tmp
            rm tmp &>/dev/null
        }
            
        ExtractDEB () {
            if [ "$2" = "fetch" ]; then
                echo "Fetching "$i"..."
                curl -sSL "$(curl -sS https://api.parcility.co/db/package/$1 | "$jq" -r '.data.repo.url + .data.builds[-1].Filename')" -o "$1.deb"
                Verbose "Fetched $1" "Couldn't fetch $1"
                echo "Extracting $1..."
                dpkg -x "$1.deb" "$dir/$tweakid/Tweak"
                rm -r "$1.deb"
            else
                echo "Extracting $(basename "$i")..."
                dpkg -x "$1" "$dir/$tweakid/Tweak"
                echo "Extracted $(basename "$i")"
            fi
        }
    ;;
    
    MacOS|Linux)
    
        RemovePlistKey () {
            "$plutil" -remove $1 $2 &>/dev/null
        }
        
        ReplacePlistValue () {
            "$plutil" -replace $2 -string "$1" $3 &>/dev/null
        }
        
        ExtractPlistValue () {
            "$plutil" -extract "$1" xml1 -o - "$2" | sed -n "s/.*<"$3">\(.*\)<\/"$3">.*/\1/p" 2>/dev/null
        }
            
        ExtractDEB () {
            currentdir="$PWD"
            mkdir -p ar
            cd ar
            if [ "$2" = "fetch" ]; then
                echo "Fetching $1..."
                curl -sSL "$(curl -sS https://api.parcility.co/db/package/"$1" | "$jq" -r '.data.repo.url + .data.builds[-1].Filename')" -o "tweak.deb"
                Verbose "Fetched "$1"" "Couldn't fetch $1"
                "$ar" -x "tweak.deb"
            else
                "$ar" -x "$1"
            fi
            echo "Extracting $(basename "$i")..."
            tar -C "$dir/$tweakid/Tweak" -xf data.tar.*
            Verbose "$(basename "$1") extracted" "Failed to extract $(basename "$1")"
            cd "$currentdir"
            rm -rf ar
        }
    ;;
esac

# UNNECESSARY FUNCTIONS

Verbose () {
    tv="$?"
    if [ "$3" != "-v" ] || [[ "$3" = "-v" && -n "$v" ]]; then
        if [ "$tv" = 0 ]; then
            echo "$1"
        else
            echo "$2"
        fi
    fi
}

# CLI ARGUEMENTS

while getopts :n:i:o:c:a:b:f:d:p:huSmeCv args; do
    case "$args" in
        n)
            name="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                name+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
        ;;
            
        b)
            bundle="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                bundle+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
            run=1
        ;;
        
        p)
            displayname="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                displayname+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
            run=1
        ;;
            
        i)
            ipadir="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                ipadir+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
        ;;
            
        o)
            outdir="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                outdir+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
        ;;
            
        c)
            c="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                c+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
            run=1
        ;;
            
        f)
            files=("$OPTARG")
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                files+=($(eval "echo \${$OPTIND}"))
                OPTIND=$((OPTIND + 1))
            done
            run=1
        ;;
            
        d)
            inject=("$OPTARG")
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                inject+=($(eval "echo \${$OPTIND}"))
                OPTIND=$((OPTIND + 1))
            done
        ;;
            
        u) u=1 && run=1 ;;
        v) v="-v" ;;
        m) m=1 ;;
        a) a=1
            if [ "$os" != "iOS" ]; then
                echo "-a is not supported on your platform"
                exit 1
            fi
            pswd="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                pswd+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
        ;;
        
        C) C=1 ;;
        e) e=1 && run=1 ;;
        S) fakesign=1 && run=1 ;;
                
        h)
            echo "Usage: azule [options]"
            echo "Mandatory Arguements"
            echo "  -i [Path]                    Specify the path to the IPA to patch"
            echo "  -o [Path]                    Specify an output directory"
            echo
            echo "Optional Arguements"
            echo "  -n [Name]                    Specify an Output Name"
            echo "  -f [Paths/Bundle IDs]        Specify the files or tweak Bundle IDs to import"
            echo "  -d [Names]                   Specify the names of the dylibs to inject (Not Recommended)"
            echo "  -c [Version]                 Set custom version for output ipa"
            echo "  -b [BundleId]                Set custom BundleID for output ipa"
            echo "  -p [Name]                    Set custom Display Name for output ipa"
            echo "  -a [Root Password]           Use APT instead of Parcility [iOS Only]"
            echo "  -u                           Remove UISupportedDevices from app"
            echo "  -v                           Enable Verbose Mode"
            echo "  -m                           Enables the manual dylib selection 'UI' (Not Recommended)"
            echo "  -C                           Disables Automatic cleanup"
            echo "  -S                           Fakesigns iPA for use with AppSync"
            echo "  -e                           Removes App Extensions"
            echo "  -h                           Print this help menu"
            echo
            echo "Examples:"
            echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f ~/Foo.dylib ~/Foo.bundle"
            echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f com.bar.foo -d Foo.dylib"
            echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f ~/Foo.framework com.bar.foo -d Foo.dylib"
            exit 1
            ;;
        *)
            echo "Invalid option: $@. Run "azule -h" to print the help menu."
            exit 1
            ;;
    esac
done

# READING OUTPUT DIRECTORY

if [ -z "$outdir" ]; then while
    printf 'Output Directory: '
    read tmp
    outdir=$(eval "echo $tmp")
    [ -z "$outdir" ] && echo "No Output Directory Specified"
do true; done; fi

# GUI
if [ -z $run ]; then
    PS3=$'Choose Arguements: '
    arguements=(
    "Inject Tweaks"
    "Change Display Name"
    "Change App Version"
    "Change BundleID"
    "Remove UISupportedDevices"
    "Fakesign iPA"
    "Remove App Extensions"
    "Run With Verbose Mode"
    "Set Custom Output Name"
    "Manually Inject dylib files (Not Recommended)"
    "Use APT instead of Parcility"
    "Done"
    )
    
    select i in "${arguements[@]}"; do
        case "$i" in
            "Inject Tweaks")
                if [ -z "$files" ]; then while
                    printf 'Files or Tweak IDs: '
                    read tmp
                    files=( $(eval "echo $tmp") )
                    [ -z "$files" ] && echo "No Files Provided"
                do true; done; fi
                run=1
            ;;
            
            "Set Custom Output Name")
                if [ -z "$name" ]; then while
                    printf 'New Display Name: '
                    read tmp
                    name=$(eval "echo \$tmp")
                    [ -z "$name" ] && echo "No Display Name Provided"
                do true; done; fi
            ;;
            
            "Change Display Name")
                if [ -z "$displayname" ]; then while
                    printf 'New Display Name: '
                    read tmp
                    displayname=$(eval "echo \$tmp")
                    [ -z "$displayname" ] && echo "No Display Name Provided"
                do true; done; fi
                run=1
            ;;
            
            "Change App Version")
                if [ -z "$c" ]; then while
                    printf 'New Version: '
                    read tmp
                    c=$(eval "echo \$tmp")
                    [ -z "$c" ] && echo "No Version Provided"
                do true; done; fi
                run=1
            ;;
                
            "Change BundleID")
                if [ -z "$bundle" ]; then while
                    printf 'New BundleID: '
                    read tmp
                    bundle=$(eval "echo \$tmp")
                    [ -z "$bundle" ] && echo "No BundleID Provided"
                do true; done; fi
                run=1
            ;;
                
            "Remove UISupportedDevices")
                u=1
                run=1
            ;;
            
            "Use APT instead of Parcility")
                a=1
                if [ -z "$pswd" ]; then while
                    printf 'New Display Name: '
                    read tmp
                    pswd=$(eval "echo \$tmp")
                    [ -z "$pswd" ] && echo "No Password Provided"
                do true; done; fi
            ;;
            
            "Fakesign iPA")
                fakesign=1
                run=1
            ;;
                
            "Manually Inject dylib files (Not Recommended)") m=1 ;;
            "Run With Verbose Mode") v="-v" ;;
            
            "Remove App Extensions")
                e=1
                run=1
            ;;
            
            "Done") break ;;
        esac
    done
fi

# READING IPA

if [ -z "$ipadir" ]; then while
    printf 'Path to IPA: '
    read tmp
    ipadir=$(eval "echo \$tmp")
    [ -z "$ipadir" ] && echo "No iPA Specified"
do true; done; fi

# VARIABLE CHECK

if [ -z "$run" ]; then
    echo "Insufficient Arguements"
    echo "Run "azule -h" for usage instructions"
    exit 1
fi

# VERBOSE
if [[ -n "$v" && -n "$files" ]]; then
    for i in "${files[@]}"; do
        echo "$i will be imported"
    done
fi

# SETTING OUTPUT DIRECTORY AND NAME

if [ ! -d "$outdir" ]; then
    if [ "${outdir: -4}" == ".ipa" ]; then
        output="$outdir"
    else
        if [ -z "$name" ]; then
            name="$(basename "$ipadir")"
            for i in "${files[@]}"; do
                name+="+"$(basename "$i")""
            done
        fi
        output="$outdir/$name.ipa"
    fi
else
    if [ -z "$name" ]; then
        name="$(basename "$ipadir")"
        for i in "${files[@]}"; do
            name+="+"$(basename "$i")""
        done
    fi
    output="$outdir/$name.ipa"
fi

# CREATING OUTPUT DIRECTORY

mkdir -p "$(dirname "$output")"
Verbose "iPA will be written to "$output"" ""$output" is an invalid output path" -v

# CREATING .TMP DIRECTORIES

dir="$(mktemp -d)"

# CLEAN ON EXIT

trap "rm -rf "$dir" && exit" SIGINT
trap "rm -rf "$dir" && exit" EXIT

tweakid="$RANDOM"
mkdir -p "$dir/$tweakid/Tweak"
Verbose "$dir/$tweakid/Tweak has been created" "Couldn't create $dir/$tweakid/Tweak" -v

mkdir -p "$dir/$tweakid/Custom"
Verbose "$dir/$tweakid/Custom has been created" "Couldn't create $dir/$tweakid/Custom" -v
cd "$dir/$tweakid"

# DECRYPTION

if [ ! -f "$ipadir" ]; then ## DECRYPTION WILL BE iOS ONLY
    echo "Invalid Path to iPA"
    exit 1
    #### BFDECRYPT
fi

# VERBOSE
if [ -n "$v" ]; then
    echo "Path to IPA is $ipadir"
fi

# EXTRACTING IPA

echo "Extracting iPA..."
eval "unzip -q '$ipadir' -d $dir/'$tweakid'"
Verbose "IPA extracted" "Couldn't extract IPA"

# REMOVING PLUGINS

if [ -n "$e" ]; then
    echo "Removing Extensions..."
    rm -rf Payload/*.app/Plug*ns
    Verbose "Removed Extensions" "Couldn't Remove Extensions"
fi

# SETTING APP EXECUTABLE

executable="Payload/$(basename Payload/*.app)/$(ExtractPlistValue CFBundleExecutable Payload/*.app/Info.plist string)"
Verbose "App executable is $executable" "Couldn't set app executable" -v
    
# ENCRYPTION CHECK

echo "Checking for Encrypted Binaries..."
for i in $(find Payload/*.app/ -name "Info.plist" ); do
    CFBundleExecutable="$(ExtractPlistValue CFBundleExecutable "$i" string)"
    if [[ -n "$CFBundleExecutable" && "$(otool -l "$(dirname "$i")/$CFBundleExecutable" | grep "cryptid 1")" ]]; then
        if ! [ "$(dirname "$i")/$CFBundleExecutable" =~ "Payload/PlugIns" ]; then
            echo "Fatal Error: "$(dirname "$i")/$CFBundleExecutable" is encrypted"
            exit 1
        else
            echo ""$(dirname "$i")/$CFBundleExecutable" is encrypted. This may cause problems later on"
        fi
    fi
done

# PROCESSING FILES

if [ -n "$files" ]; then

    # PREPARING FILES
    
    for i in "${files[@]}"; do
        if [ -f "$i" ] || [ -d "$i" ]; then
            case "$i" in
                *.deb) ExtractDEB "$i" ;;
            
                *.dylib)
                    rsync -a "$i" "$dir/$tweakid/Custom"
                    Verbose "Copied "$(basename "$i")" to work directory" "Couldn't Copy "$(basename "$i")" to work directory" -v
                    
                    inject+=( $(basename "$i") )
                ;;

                *.framework)
                    rsync -a "$i" Payload/*.app/Frameworks
                    Verbose "Moved $i to app directory" "Couldn't Move $i to app directory"
                
                    inject+=( "$(basename "$i")/$(ExtractPlistValue CFBundleExecutable "$i"/Info.plist string)" )
                ;;
            
                *)
                    rsync -a "$i" Payload/*.app
                    Verbose "Moved $i to app directory" "Couldn't Move $i to app directory"
                ;;
            esac
        else
        
            # FETCHING DEBS
            
            if [ "$os" == "iOS" ] && [ -n "$a" ]; then
                if [ -z "$rcount" ]; then
                    echo "Updating Sources..."
                    echo "$pswd" | sudo -S apt update &>/dev/null
                    while read g; do echo "$pswd" | sudo -S rm -rf "$g"; done < <(find "/var/cache/apt/archives" -maxdepth 1 -iname '*.deb')
                fi
                rcount=1
                echo "Fetching "$i""
                echo "$pswd" | sudo -S apt-get install --download-only "$i" -y --allow-unauthenticated &>/dev/null
                while read g; do
                    ExtractDEB "$g"
                    echo "$pswd" | sudo -S rm -rf "$g"
                done < <(find "/var/cache/apt/archives" -maxdepth 1 -iname '*.deb')
            else
                if [ "$(curl -sS https://api.parcility.co/db/package/"$i" | "$jq" -r .status)" = "true" ]; then
                    ExtractDEB "$i" fetch
                else
                    echo "$i isn't available on Parcility. Try getting the files manually. "
                    exit
                fi
            fi
        fi
    done

    # SPECIFYING DYLIBS
    
    if [ -n "$m" ]; then
        if [ -n "$(ls -A "$dir/$tweakid/Tweak" 2>/dev/null)" ]; then
            export COLUMNS=1
            dylibs=( $(find "$dir/$tweakid/Tweak" -iname '*.dylib' -exec basename {} \;) 'Done' )
            echo $'Available Dylibs: '
            PS3=$'Choose Dylibs (recommended): '
            select i in "${dylibs[@]}"; do
                if [ "$i" = "Done" ]; then break
                else
                    inject+=( "$i" )
                fi
            done
        else
            echo "No dylibs available"
            pause
        fi
    else
        dylibs=( $(find "$dir/$tweakid/Tweak" -iname '*.dylib') )
        
        # AUTOMATIC DYLIB SELECTION
        
        for i in "${dylibs[@]}"; do
            if [[ "$i" =~ "$dir/$tweakid/Tweak/usr/lib/" ]]; then
                inject+=( "$(basename "$i")" )
            else
                identifier="$(ExtractPlistValue Filter ${i%.*}.plist string)"
                idtype="$(ExtractPlistValue Filter ${i%.*}.plist key)"
            
                case "$idtype" in
                    Bundles)
                        ipabundleid="$(ExtractPlistValue CFBundleIdentifier Payload/*.app/Info.plist string)"
                    
                        if [[ "$identifier" =~ "$ipabundleid" ]]; then
                            inject+=( "$(basename "$i")" )
                        fi
                    ;;
            
                    Executables)
                        if [[ "$identifier" =~ "$(basename "$executable")" ]]; then
                            inject+=( "$(basename "$i")" )
                        fi
                    ;;
                
                esac
            fi
        done
    fi

    # INJECTING DYLIBS
    
    for i in "${inject[@]}"; do
        find "$dir/$tweakid/Tweak" "$dir/$tweakid/Custom" -name "$i" -exec rsync -a {} Payload/*.app/Frameworks \;
        Verbose "Copied "$(basename "$i")" to app directory" ""$(basename "$i")" couldn't be copied to app directory"
        
        "$insert_dylib" --inplace --weak --all-yes "@rpath/$i" "$executable" &> /dev/null
        Verbose "Injected $i" "Couldn't inject $i)"
    done

    # MOVING BUNDLES
    
    find "$dir/$tweakid/Tweak" -iname '*.bundle' ! -path '*.bundle/*' ! -path '*.framework/*' | while read i; do
        rsync -a "$i" Payload/*.app/
        Verbose "Copied "$(basename "$i")" to app directory" ""$(basename "$i")" couldn't be copied to app directory"
    done

    # MOVING CYDIASUBSTRATE.FRAMEWORK TO APP DIRECTORY
    
    rsync -a "$azule"/CydiaSubstrate.framework Payload/*.app/Frameworks
    Verbose "Copied CydiaSubstrate.framework to app directory" "CydiaSubstrate.framework couldn't be copied to app directory"
    
    inject+=( CydiaSubstrate.framework/CydiaSubstrate )

    # MOVING OTHER FRAMEWORKS TO APP DIRECTORY
    
    while read i; do
        rsync -a "$i" Payload/*.app/Frameworks
        Verbose "Copied $(basename "$i") to app directory" "$(basename "$i") couldn't be copied to app directory"

        inject+=( "$(basename "$i")/$(ExtractPlistValue CFBundleExecutable "$i/Info.plist" string)" )
    done < <(find "$dir/$tweakid/Tweak" -iname '*.framework')

    # FIXING LINKS
    
    for i in "${inject[@]}"; do
        "$ldid" -r Payload/*.app/Frameworks/"$i"
        Verbose "Codesign stripped from $i" "Couldn't strip codesign from $i" -v
    
        links=( $("$otool" -L Payload/*.app/Frameworks/"$i" | sort -u | cut -d ' ' -f1) )
        for l in "${links[@]}"; do
            for x in "${inject[@]}"; do
                if [[ "$l" =~ "$x" ]]; then
                    if [[ "$l" =~ "$i" ]]; then
                        "$install_name_tool" -id @rpath/"$i" Payload/*.app/Frameworks/"$i" &>/dev/null
                        tid=$(( $tid + $? ))
                        break
                    else
                        "$install_name_tool" -change "$l" @rpath/"$x" Payload/*.app/Frameworks/"$i" &>/dev/null
                        tlnk=$(( $tlnk + $? ))
                        break
                    fi
                fi
            done
        done
    done

    # VERBOSE
    if [[ "$tid" = 0 || -z "$tid" ]]; then
        echo "ID Successful"
    else
        echo "$tid files failed to ID"
    fi

    if [[ "$tlnk" = 0 || -z "$tlnk" ]]; then
        echo "Re-Link Successful"
    else
        echo "$tlnk Re-Links failed"
    fi
fi

# REMOVING UISUPPORTEDDEVICES

if [ -n "$u" ]; then
    UISupportedDevices="$(ExtractPlistValue UISupportedDevices Payload/*.app/Info.plist string)"
    if [ -n "$UISupportedDevices" ]; then
        RemovePlistKey UISupportedDevices Payload/*.app/Info.plist
        Verbose "Removed UISupportedDevices from app" "Couldn't remove UISupportedDevices from app"
    else
        echo "The specified iPA doesn't have UISupportedDevices"
    fi
fi

# CHANGING BUNDLEID

if [ -n "$bundle" ]; then
    ReplacePlistValue "$bundle" CFBundleIdentifier Payload/*.app/Info.plist
    Verbose "Changed App BundleID to $bundle" "Couldn't Change App BundleID"
fi

# CHANGING DISPLAY NAME

if [ -n "$displayname" ]; then
    ReplacePlistValue "$displayname" CFBundleDisplayName Payload/*.app/Info.plist
    Verbose "Changed App Display Name to $displayname" "Couldn't Change App Display Name"
fi

# CHANGING VERSION

if [ -n "$c" ]; then
    ReplacePlistValue "$c" CFBundleVersion Payload/*.app/Info.plist
    ReplacePlistValue "$c" CFBundleShortVersionString Payload/*.app/Info.plist
    Verbose "Changed App Version to $c" "Couldn't Change App Version"
fi

# FAKESIGNING

if [ -n "$fakesign" ]; then
    echo "Fakesigning iPA..."
    "$ldid" -S -M Payload/* &>/dev/null
    Verbose "Fakesigned iPA" "Couldn't Fakesign iPA"
fi

# WRAPPING UP

echo "Generating iPA..."
eval "zip -rq '$output' Payload"
Verbose "Generated IPA at $output" "Couldn't generate IPA"

# VERBOSE
if [ -z "$C" ]; then
    rm -rf "$dir"
    Verbose "Cleaned up" "Couldn't clean up" -v
fi
