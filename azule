#!/bin/bash

# CLEAN ON EXIT
trap "rm -rf $azule/.tmp && exit" SIGINT
trap "rm -rf $azule/.tmp && exit" EXIT

# PLATFORM SPECIFIC
case $(uname) in
    Darwin)
        if [[ "$(uname -m)" == arm64 || "$(uname -m)" == x86_64 ]]; then
            jq="$AZULE/usr/bin/jq"
            insert_dylib="$AZULE/usr/bin/insert_dylib"
            plutil="plutil"
            ar="ar"
            otool="otool"
            install_name_tool="install_name_tool"
            ldid="$AZULE/usr/bin/ldid"
            ipatool="$AZULE/usr/bin/ipatool"
            azule="$AZULE"
            
            RemovePlistKey () {
                "$plutil" -remove $1 $2 &>/dev/null
            }
            
            ReplacePlistValue () {
                "$plutil" -replace $2 -string "$1" $3 &>/dev/null
            }
            
            ExtractPlistValue () {
                "$plutil" -extract "$1" xml1 -o - "$2" | sed -n "s/.*<"$3">\(.*\)<\/"$3">.*/\1/p" 2>/dev/null
            }
            
            ExtractDEB () {
                currentdir="$PWD"
                mkdir -p ar
                cd ar
                if [ "$2" = "fetch" ]; then
                    echo "Fetching $1..."
                    curl -sSL "$(curl -sS https://api.parcility.co/db/package/$1 | "$jq" -r '.data.repo.url + .data.builds[-1].Filename')" -o "$1.deb"
                    Verbose "Fetched "$1"" "Couldn't fetch $1"
                    "$ar" -x "$1.deb"
                else
                    "$ar" -x "$1"
                fi
                echo "Extracting $1..."
                tar -C "$dir/$tweakid/Tweak" -xf data.tar.*
                Verbose "$(basename "$1") extracted" "Failed to extract $(basename "$1")"
                cd "$currentdir"
                rm -rf ar
            }
            
            DecryptBinary () {
                "$AZULE/usr/bin/unfairplay" "$1" tmp &>/dev/null
                if [ "$?" = "0" ]; then
                    mv tmp "$1"
                else
                    echo "Couldn't decrypt $1"
                    return 1
                    rm -f tmp
                fi
            }
        else
            jq="jq"
            insert_dylib="insert_dylib"
            plutil="plutil"
            ar="ar"
            otool="otool"
            install_name_tool="install_name_tool"
            ldid="ldid"
            ipatool="ipatool-azule"
            azule="/var/mobile/Documents/Azule"
            
            RemovePlistKey () {
                "$plutil" -remove -key $1 $2 &>/dev/null
            }
            
            ReplacePlistValue () {
                "$plutil" -value $1 -key $2 $3 &>/dev/null
            }
            
            ExtractPlistValue () {
                "$plutil" -key "$1" "$2" >> tmp 2>/dev/null
                if [ "$?" != "0" ]; then
                    rm tmp &>/dev/null
                    return 1
                fi
                "$plutil" -convert xml1 tmp &>/dev/null
                
                cat tmp | sed -n "s/.*<"$3">\(.*\)<\/"$3">.*/\1/p"
                rm tmp &>/dev/null
            }
            
            ExtractDEB () {
                if [ "$2" = "fetch" ]; then
                    echo "Fetching $1..."
                    curl -sSL "$(curl -sS https://api.parcility.co/db/package/$1 | "$jq" -r '.data.repo.url + .data.builds[-1].Filename')" -o "$1.deb"
                    Verbose "Fetched "$1"" "Couldn't fetch $1"
                    echo "Extracting $1..."
                    dpkg -x "$1.deb" "$dir/$tweakid/Tweak"
                    rm -r "$1.deb"
                else
                    echo "Extracting $1..."
                    dpkg -x "$1" "$dir/$tweakid/Tweak"
                fi
            }
            
            DecryptBinary () {
                flexdecrypt "$1" --output "$1" &>/dev/null
                if [ "$?" != "0" ]; then
                    echo "Couldn't decrypt $1"
                    return 1
                fi
            }
            iOS=1
        fi
    ;;
    
    Linux)
        jq="jq"
        insert_dylib="$AZULE/usr/bin/insert_dylib_linux"
        plutil="$AZULE/usr/bin/plutil"
        ar="$AZULE/toolchain/usr/bin/ar"
        otool="$AZULE/toolchain/usr/bin/otool"
        install_name_tool="$AZULE/toolchain/usr/bin/install_name_tool"
        ldid="$AZULE/toolchain/usr/bin/ldid"
        azule="$AZULE"
        
        RemovePlistKey () {
            "$plutil" -remove $1 $2 &>/dev/null
        }
            
        ReplacePlistValue () {
            "$plutil" -replace $2 -string "$1" $3 &>/dev/null
        }
            
        ExtractPlistValue () {
            "$plutil" -extract "$1" xml1 -o - "$2" | sed -n "s/.*<"$3">\(.*\)<\/"$3">.*/\1/p" 2>/dev/null
        }
        
        ExtractDEB () {
            currentdir="$PWD"
            mkdir -p ar
            cd ar
            if [ "$2" = "fetch" ]; then
                echo "Fetching $1..."
                curl -sSL "$(curl -sS https://api.parcility.co/db/package/$1 | "$jq" -r '.data.repo.url + .data.builds[-1].Filename')" -o "$1.deb"
                Verbose "Fetched "$1"" "Couldn't fetch $1"
                "$ar" -x "$1.deb"
            else
                "$ar" -x "$1"
            fi
            echo "Extracting $1..."
            tar -C "$dir/$tweakid/Tweak" -xf data.tar.*
            Verbose "$(basename "$1") extracted" "Failed to extract $(basename "$1")"
            cd "$currentdir"
            rm -rf ar
        }
    ;;
esac

# UNNECESSARY FUNCTIONS
Verbose () {
    tv="$?"
    if [ "$3" != "-v" ] || [[ "$3" = "-v" && -n "$v" ]]; then
        if [ "$tv" = 0 ]; then
            echo "$1"
        else
            echo "$2"
        fi
    fi
}

# ARGUEMENTS
while getopts :n:i:o:c:b:f:d:x:p:huSmelCv args; do
    case "$args" in
        n)
            name="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                name+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
        ;;
            
        b)
            bundle="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                bundle+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
            run=1
        ;;
        
        p)
            displayname="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                displayname+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
            run=1
        ;;
            
        i)
            ipadir="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                ipadir+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
        ;;
            
        o)
            outdir="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                outdir+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
        ;;
            
        c)
            c="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                c+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
            run=1
        ;;
            
        f)
            files=("$OPTARG")
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                files+=($(eval "echo \${$OPTIND}"))
                OPTIND=$((OPTIND + 1))
            done
            run=1
        ;;
            
        d)
            inject=("$OPTARG")
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                inject+=($(eval "echo \${$OPTIND}"))
                OPTIND=$((OPTIND + 1))
            done
        ;;
            
        u) u=1 && run=1 ;;
        v) v=1 ;;
        m) m=1 ;;
        x)
            if [ -z "$iOS" ]; then
                echo "-x is not supported on your platform"
                exit 1
            fi
            appleid="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                password=($(eval "echo \${$OPTIND}"))
                OPTIND=$((OPTIND + 1))
            done
            run=1
        ;;
        
        C) C=1 ;;
        e) e=1 && run=1 ;;
        l) ldecrypt=1 && run=1 ;;
        S) fakesign=1 && run=1 ;;
                
        h)
            echo "Usage: azule [options]"
            echo "Mandatory Arguements"
            echo "  -i [Path]                    Specify the path to the IPA to patch"
            echo "  -o [Path]                    Specify an output directory"
            echo
            echo "Optional Arguements"
            echo "  -n [Name]                    Specify an Output Name"
            echo "  -f [Paths/Bundle IDs]        Specify the files or tweak Bundle IDs to import"
            echo "  -d [Names]                   Specify the names of the dylibs to inject (Not Recommended)"
            echo "  -c [Version]                 Set custom version for output ipa"
            echo "  -b [BundleId]                Set custom BundleID for output ipa"
            echo "  -p [Name]                    Set custom Display Name for output ipa"
            echo "  -u                           Remove UISupportedDevices from app"
            echo "  -v                           Enable Verbose Mode"
            echo "  -m                           Enables the manual dylib selection 'UI' (Not Recommended)"
            echo "  -C                           Disables Automatic cleanup"
            echo "  -S                           Fakesigns iPA for use with AppSync"
            echo "  -e                           Removes App Extensions"
            echo "  -x [Apple ID] [Password]     Fetch and decrypt iPA [iOS Only] (Broken)"
            echo "  -l                           Attempt to decrypt app [iOS Only] (Potentially Broken)"
            echo "  -h                           Print this help menu"
            echo
            echo "Examples:"
            echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f ~/Foo.dylib ~/Foo.bundle"
            echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f com.bar.foo -d Foo.dylib"
            echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f ~/Foo.framework com.bar.foo -d Foo.dylib"
            exit 1
            ;;
        *)
            echo 'Invalid argument. Run "azule -h" to print the help menu.'
            exit 1
            ;;
    esac
done

# OUTPUT DIRECTORY
if [ -z "$outdir" ]; then while
    printf 'Output Directory: '
    read tmp
    outdir=$(eval "echo $tmp")
    [ -z "$outdir" ] && echo "I don't want to keep the app for myself."
do true; done; fi

# GET IPA
if [ -z "$ipadir" ]; then while
    printf 'Path to IPA: '
    read tmp
    ipadir=$(eval "echo \$tmp")
    [ -z "$ipadir" ] && echo "I need the IPA to make your app."
do true; done; fi

if [ -z $run ]; then
    PS3=$'Choose Arguements: '
    arguements=(
    "Inject Tweaks"
    "Change Display Name"
    "Change App Version"
    "Change BundleID"
    "Remove UISupportedDevices"
    "Fakesign iPA"
    "Remove App Extensions"
    "Run With Verbose Mode"
    "Set Custom Output Name"
    "Manually Inject dylib files (Not Recommended)"
    )
    
    if [ -n "$iOS" ]; then
        arguements+=( "Attempt to decrypt App (Potentially Broken)" )
    fi
    
    arguements+=( "Done" )
    select i in "${arguements[@]}"; do
        case "$i" in
            "Inject Tweaks")
                if [ -z "$files" ]; then while
                    printf 'Files or Tweak IDs: '
                    read tmp
                    files=( $(eval "echo $tmp") )
                    [ -z "$files" ] && echo "No Files Provided"
                do true; done; fi
                run=1
            ;;
            
            "Fetch iPA")
                if [ -z "$appleid" ]; then while
                    printf 'Apple ID: '
                    read appleid
                    [ -z "$appleid" ] && echo "No Apple ID Provided"
                do true; done; fi
                
                if [ -z "$password" ]; then while
                    printf 'Password for Apple ID: '
                    read password
                    [ -z "$password" ] && echo "No Password Provided"
                do true; done; fi
                run=1
            ;;
            
            "Set Custom Output Name")
                if [ -z "$name" ]; then while
                    printf 'New Display Name: '
                    read tmp
                    name=$(eval "echo \$tmp")
                    [ -z "$name" ] && echo "No Display Name Provided"
                do true; done; fi
            ;;
            
            "Change Display Name")
                if [ -z "$displayname" ]; then while
                    printf 'New Display Name: '
                    read tmp
                    displayname=$(eval "echo \$tmp")
                    [ -z "$displayname" ] && echo "No Display Name Provided"
                do true; done; fi
                run=1
            ;;
            
            "Change App Version")
                if [ -z "$c" ]; then while
                    printf 'New Version: '
                    read tmp
                    c=$(eval "echo \$tmp")
                    [ -z "$c" ] && echo "No Version Provided"
                do true; done; fi
                run=1
            ;;
                
            "Change BundleID")
                if [ -z "$bundle" ]; then while
                    printf 'New BundleID: '
                    read tmp
                    bundle=$(eval "echo \$tmp")
                    [ -z "$bundle" ] && echo "No BundleID Provided"
                do true; done; fi
                run=1
            ;;
                
            "Remove UISupportedDevices")
                u=1
                run=1
            ;;
            
            "Fakesign iPA")
                fakesign=1
                run=1
            ;;
                
            "Manually Inject dylib files (Not Recommended)") m=1 ;;
            "Run With Verbose Mode") v=1 ;;
            
            "Remove App Extensions")
                e=1
                run=1
            ;;
            
            "Attempt to decrypt App (Potentially Broken)")
                ldecrypt=1
                run=1
            ;;
            "Done") break ;;
        esac
    done
fi

if [ -z "$run" ]; then
    echo "Insufficient Arguements"
    echo "Run "azule -h" for usage instructions"
    exit 1
fi

# VERBOSE
if [[ -n "$v" && -n "$files" ]]; then
    for i in "${files[@]}"; do
        echo "$i will be imported"
    done
fi

# DECLARE $NAME
if [ -z "$name" ]; then
    name="$(basename "$ipadir")"
    for i in "${files[@]}"; do
        name+="+"$(basename "$i")""
    done
fi

# VERBOSE
if [ -n "$v" ]; then
    if [ -n "$name" ]; then
        echo "Output Name is $name"
    else
        echo "$name is an invalid output name"
    fi
fi

tweakid="$RANDOM"
mkdir -p "$(dirname "$outdir/$name")"
Verbose "Output Directory is $(dirname "$outdir/$name")" "$(dirname "$outdir/$name") is an invalid output directory" -v

# .TMP DIRECTORIES
dir="$(mktemp -d)"
mkdir -p "$dir/$tweakid/Tweak"
Verbose "$dir/$tweakid/Tweak has been created" "Couldn't create $dir/$tweakid/Tweak" -v

mkdir -p "$dir/$tweakid/Custom"
Verbose "$dir/$tweakid/Custom has been created" "Couldn't create $dir/$tweakid/Custom" -v
cd "$dir/$tweakid"

if [[ ! -f "$ipadir" && -n "$iOS" ]]; then
    if [ -n "$appleid" ]; then
        echo "Fetching App..."
        "$ipatool" download -b "$ipadir" -e "$appleid" -p "$password"
        if [ "$?" != "0" ]; then
            echo "Couldn't find app on the App Store"
            exit 1
        fi
        echo "Fetched App"
        echo "Extracting App"
        eval "unzip -q '"$dir/$tweakid"/*.ipa' -d $dir/'$tweakid'"
        Verbose "IPA extracted" "Couldn't extract IPA"
        unzipped=1
    else
        if [ -n "$ldecrypt" ]; then
            while read i; do
                if [ "$("$plutil" -key MCMMetadataIdentifier "$i")" = "$ipadir" ]; then
                    echo "Preparing App..."
                    mkdir -p Payload
                    rsync -a $(dirname "$i")/*.app Payload
                    unzipped=1
                    break
                fi
            done < <(find /var/containers/Bundle/Application -name .com.apple.mobile_container_manager.metadata.plist)
            
            if [ -z "$unzipped" ]; then
                echo "Couldn't find app"
                exit 1
            fi
        fi
    fi
fi

if [ -n "$v" ]; then
    if [ -f "$ipadir" ]; then
        echo "Path to IPA is $ipadir"
    else
        if [ -n "$unzipped" ]; then
            echo "BundleID of App is $ipadir"
        fi
    fi
fi

if [[ ! -f "$ipadir" && -z "$unzipped" ]]; then
    echo "Invalid iPA"
    exit 1
fi

# EXTRACT IPA
if [ -z "$unzipped" ]; then
    echo "Extracting iPA..."
    eval "unzip -q '$ipadir' -d $dir/'$tweakid'"
    Verbose "IPA extracted" "Couldn't extract IPA"
fi

# REMOVING PLUGINS
if [ -n "$e" ]; then
    echo "Removing Extensions..."
    rm -rf Payload/*.app/Plug*ns
    Verbose "Removed Extensions" "Couldn't Remove Extensions"
fi

# ENCRYPTION CHECK
if [ -n "$iOS" ]; then
    echo "Checking for Encrypted Binaries..."
    for i in $(find Payload/*.app/ -name "Info.plist" ); do
    CFBundleExecutable="$(ExtractPlistValue CFBundleExecutable "$i" string)"
        if [[ -n "$CFBundleExecutable" && "$(otool -l "$(dirname "$i")/$CFBundleExecutable" | grep "cryptid 1")" ]]; then
            if [ -z "$ran" ]; then
                echo "Decrypting App..."
            fi
            DecryptBinary "$(dirname "$i")/$CFBundleExecutable"
            ran=1
        fi
    done
    
    if [ -n "$ran" ]; then
        echo "Decrypted App"
    else
        echo "App Was Not Encrypted"
    fi
fi

if [ -n "$files" ]; then
    executable="Payload/$(basename Payload/*.app)/$(ExtractPlistValue CFBundleExecutable Payload/*.app/Info.plist string)"
    Verbose "App executable is $executable" "Couldn't set app executable" -v

    for i in "${files[@]}"; do
        if [ -f "$i" ] || [ -d "$i" ]; then
            case "$i" in
                *.deb) ExtractDEB "$i" ;;
            
                *.dylib)
                    rsync -a "$i" "$dir/$tweakid/Custom"
                    Verbose "Copied "$(basename "$i")" to work directory" "Couldn't Copy "$(basename "$i")" to work directory" -v
                    
                    inject+=( $(basename "$i") )
                ;;

                *.framework)
                    rsync -a "$i" Payload/*.app/Frameworks
                    Verbose "Moved $i to app directory" "Couldn't Move $i to app directory"
                
                    inject+=( "$(basename "$i")/$(ExtractPlistValue CFBundleExecutable "$i"/Info.plist string)" )
                ;;
            
                *)
                    rsync -a "$i" Payload/*.app
                    Verbose "Moved $i to app directory" "Couldn't Move $i to app directory"
                ;;
            esac
        else
            if [ "$(curl -sS https://api.parcility.co/db/package/"$i" | "$jq" -r .status)" = "true" ]; then
                ExtractDEB "$i" fetch
            else
                echo "$i isn't available on Parcility. Try getting the files manually. "
                exit
            fi
        fi
    done

# SPECIFY DYLIBS
    if [ -n "$m" ]; then
        if [ -n "$(ls -A "$dir/$tweakid/Tweak" 2>/dev/null)" ]; then
            export COLUMNS=1
            dylibs=( $(find "$dir/$tweakid/Tweak" -iname '*.dylib' -exec basename {} \;) 'Done' )
            echo $'Available Dylibs: '
            PS3=$'Choose Dylibs (recommended): '
            select i in "${dylibs[@]}"; do
                if [ "$i" = "Done" ]; then break
                else
                    inject+=( "$i" )
                fi
            done
        else
            echo "No dylibs available"
            pause
        fi
    else
        dylibs=( $(find "$dir/$tweakid/Tweak" -iname '*.dylib') )

        for i in "${dylibs[@]}"; do
            if [[ "$i" =~ "$dir/$tweakid/Tweak/usr/lib/" ]]; then
                inject+=( "$(basename "$i")" )
            else
                identifier="$(ExtractPlistValue Filter ${i%.*}.plist string)"
                idtype="$(ExtractPlistValue Filter ${i%.*}.plist key)"
            
                case "$idtype" in
                    Bundles)
                        ipabundleid="$(ExtractPlistValue CFBundleIdentifier Payload/*.app/Info.plist string)"
                    
                        if [[ "$identifier" =~ "$ipabundleid" ]]; then
                            inject+=( "$(basename "$i")" )
                        fi
                    ;;
            
                    Executables)
                        if [[ "$identifier" =~ "$(basename "$executable")" ]]; then
                            inject+=( "$(basename "$i")" )
                        fi
                    ;;
                
                esac
            fi
        done
    fi

# INJECT DYLIBS
    for i in "${inject[@]}"; do
        find "$dir/$tweakid/Tweak" "$dir/$tweakid/Custom" -name "$i" -exec rsync -a {} Payload/*.app/Frameworks \;
        Verbose "Copied "$(basename "$i")" to app directory" ""$(basename "$i")" couldn't be copied to app directory"
        
        "$insert_dylib" --inplace --weak --all-yes "@rpath/$i" "$executable" &> /dev/null
        Verbose "Injected $i" "Couldn't inject $i)"
    done

    # MOVE BUNDLES
    find "$dir/$tweakid/Tweak" -iname '*.bundle' ! -path '*.bundle/*' ! -path '*.framework/*' | while read i; do
        rsync -a "$i" Payload/*.app/
        Verbose "Copied "$(basename "$i")" to app directory" ""$(basename "$i")" couldn't be copied to app directory"
    done

# FIX LINKS
    rsync -a "$azule"/CydiaSubstrate.framework Payload/*.app/Frameworks
    Verbose "Copied CydiaSubstrate.framework to app directory" "CydiaSubstrate.framework couldn't be copied to app directory"
    
    inject+=( CydiaSubstrate.framework/CydiaSubstrate )

    while read i; do
        rsync -a "$i" Payload/*.app/Frameworks
        Verbose "Copied $(basename "$i") to app directory" "$(basename "$i") couldn't be copied to app directory"

        inject+=( "$(basename "$i")/$(ExtractPlistValue CFBundleExecutable "$i/Info.plist" string)" )
    done < <(find "$dir/$tweakid/Tweak" -iname '*.framework')

    for i in "${inject[@]}"; do
        "$ldid" -r Payload/*.app/Frameworks/"$i"
        Verbose "Codesign stripped from $i" "Couldn't strip codesign from $i" -v
    
        links=( $("$otool" -L Payload/*.app/Frameworks/"$i" | cut -d ' ' -f1 | sort -u) )
        for l in "${links[@]}"; do
            for x in "${inject[@]}"; do
                if [[ "$l" =~ "$x" ]]; then
                    if [[ "$l" =~ "$i" ]]; then
                        "$install_name_tool" -id @rpath/"$i" Payload/*.app/Frameworks/"$i" &>/dev/null
                        tid=$(( $tid + $? ))
                        break
                    else
                        "$install_name_tool" -change "$l" @rpath/"$x" Payload/*.app/Frameworks/"$i" &>/dev/null
                        tlnk=$(( $tlnk + $? ))
                        break
                    fi
                fi
            done
        done
    done

    if [[ "$tid" = 0 || -z "$tid" ]]; then
        echo "ID Successful"
    else
        echo "$tid files failed to ID"
    fi

    if [[ "$tlnk" = 0 || -z "$tlnk" ]]; then
        echo "Re-Link Successful"
    else
        echo "$tlnk Re-Links failed"
    fi
fi

if [ -n "$u" ]; then
    UISupportedDevices="$(ExtractPlistValue UISupportedDevices Payload/*.app/Info.plist string)"
    if [ -n "$UISupportedDevices" ]; then
        RemovePlistKey UISupportedDevices Payload/*.app/Info.plist
        Verbose "Removed UISupportedDevices from app" "Couldn't remove UISupportedDevices from app"
    else
        echo "The specified iPA doesn't have UISupportedDevices"
    fi
fi

if [ -n "$bundle" ]; then
    ReplacePlistValue "$bundle" CFBundleIdentifier Payload/*.app/Info.plist
    Verbose "Changed App BundleID to $bundle" "Couldn't Change App BundleID"
fi

if [ -n "$displayname" ]; then
    ReplacePlistValue "$displayname" CFBundleDisplayName Payload/*.app/Info.plist
    Verbose "Changed App Display Name to $displayname" "Couldn't Change App Display Name"
fi

if [ -n "$c" ]; then
    ReplacePlistValue "$c" CFBundleVersion Payload/*.app/Info.plist
    ReplacePlistValue "$c" CFBundleShortVersionString Payload/*.app/Info.plist
    Verbose "Changed App Version to $c" "Couldn't Change App Version"
fi

# FAKESIGNING
if [ -n "$fakesign" ]; then
    echo "Fakesigning iPA..."
    "$ldid" -S -M Payload/* &>/dev/null
    Verbose "Fakesigned iPA" "Couldn't Fakesign iPA"
fi

# WRAPPING UP
echo "Generating iPA..."
eval "zip -rq9 '$outdir/$name.ipa' Payload"
Verbose "Generated IPA at $outdir/$name.ipa" "Couldn't generate IPA"

if [ -z "$C" ]; then
    rm -rf "$dir"
    Verbose "Cleaned up" "Couldn't clean up" -v
fi
