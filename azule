#!/bin/bash

# SET INITIAL DIRECTORIES
rootdir="$PWD"
empty_dir="$(mktemp -d)"
cd "$empty_dir" || exit

# SET PLATFORM
case "$(uname -s)" in
    "Linux") os="Linux" ;;
    "Darwin")
        case "$(uname -m)" in
            "arm64"|"x86_64") os="MacOS" ;;
            *) os="iOS" ;;
        esac
    ;;
esac

# PLATFORM-SPECIFIC VARIABLES
case "$os" in
    MacOS)
        # Add tweak tools to PATH
        if [ -d "$AZULE/bin/darwin" ] ; then
            PATH="$AZULE/bin/darwin:$PATH"
        fi
    ;;

    Linux)
        # Add tweak tools to PATH
        if [ -d "$AZULE/bin/linux" ] ; then
            PATH="$AZULE/bin/linux:$PATH"
        fi
        # Add toolchain to PATH
        if [ -d "$AZULE/toolchain/bin" ] ; then
            PATH="$AZULE/toolchain/bin:$PATH"
        fi
    ;;
esac

# PLATFORM-SPECIFIC FUNCTIONS
case "$os" in

    iOS)
        RemovePlistKey () {
            plutil -remove -key "$1" "$2" &>/dev/null
        }

        ReplacePlistValue () {
            plutil -value "$1" -key "$2" "$3" &>/dev/null
        }

        ExtractPlistValue () {
            if ! plutil -key "$1" "$2" >> tmp 2>/dev/null; then
                rm tmp &>/dev/null
                return 1
            fi

            plutil -convert xml1 tmp &>/dev/null

            if [ -n "$3" ]; then
                sed -n "s/.*<key>\(.*\)<\/key>.*/\1/p" tmp
            else
                sed -n "s/.*<string>\(.*\)<\/string>.*/\1/p" tmp
            fi
            rm tmp &>/dev/null
        }

        ExtractDEB () {
            if [ "$2" = "fetch" ]; then
                echo "Fetching $i..."
                curl -sSL "$(curl -sS https://api.parcility.co/db/package/"$1" | jq -r '.data.repo.url + .data.builds[-1].Filename')" -o "$1.deb"
                Verbose "Fetched $1" "Couldn't fetch $1"
                echo "Extracting $1..."
                dpkg -x "$1.deb" "$dir/$tweakid/Tweak"
                rm -r "$1.deb"
            else
                echo "Extracting $(basename "$i")..."
                dpkg -x "$1" "$dir/$tweakid/Tweak"
                echo "Extracted $(basename "$i")"
            fi
        }
    ;;

    MacOS|Linux)
        RemovePlistKey () {
            plutil -remove "$1" "$2" &>/dev/null
        }

        ReplacePlistValue () {
            plutil -replace "$2" -string "$1" "$3" &>/dev/null
        }

        ExtractPlistValue () {
            if [ -n "$3" ]; then
                psed="key"
            else
                psed="string"
            fi
            plutil -extract "$1" xml1 -o - "$2" | sed -n "s/.*<$psed>\(.*\)<\/$psed>.*/\1/p" 2>/dev/null
        }

        ExtractDEB () {
            origin_dir="$PWD"
            TMP=$(mktemp -d)
            cd "$TMP" || exit
            if [ "$2" = "fetch" ]; then
                echo "Fetching $1..."
                curl -sSL "$(curl -sS https://api.parcility.co/db/package/"$1" | jq -r '.data.repo.url + .data.builds[-1].Filename')" -o "tweak.deb"
                Verbose "Fetched $1" "Couldn't fetch $1"
                ar -x "tweak.deb"
            else
                ar -x "$1"
            fi
            echo "Extracting $(basename "$i")..."
            tar -C "$dir/$tweakid/Tweak" -xf data.tar.*
            Verbose "$(basename "$1") extracted" "Failed to extract $(basename "$1")"
            cd "$origin_dir" || exit
            rm -rf "$TMP"
        }
    ;;
esac

# FUNCTIONS
Verbose () {
    tv="$?"
    if [ "$3" != "-v" ] || [[ "$3" = "-v" && -n "$v" ]]; then
        if [ "$tv" = 0 ]; then
            echo "$1"
        else
            echo "$2"
        fi
    fi
}

expand () {
    origin_dir="$PWD"
    cd "$empty_dir" || exit
    process_var="$(echo "${1//\\ / }" | xargs)"
    
    if [[ "$process_var" == .* ]]; then
        process_var="$(echo "$process_var" | sed "s|\.|$rootdir|")"
    fi

    if ! [ -e "$process_var" ]; then
        if [ "$2" == "-f" ]; then
            if [ -f "$rootdir/$process_var" ]; then
                process_var="$rootdir/$process_var"
            fi
        else
            if [ -e "$rootdir/$process_var" ]; then
                process_var="$rootdir/$process_var"
            fi
        fi
    fi
        
    cd "$origin_dir" || exit
    
    echo "$process_var"
}

cleanup () {
    if [[ "$os" == "iOS" && -e "$dir/$tweakid/bfbackup.plist" ]]; then
        mv "$dir/$tweakid/bfbackup.plist" /var/mobile/Library/Preferences/com.level3tjg.bfdecrypt.plist
    fi
    rm -rf "$dir"
    rm -rf "$empty_dir"
    exit
}

# CLEAN ON EXIT
trap "cleanup" SIGINT

# CLI ARGUEMENTS
while getopts :n:i:o:c:a:b:x:f:d:p:huSewmzglv args; do
    case "$args" in
        n)
            name="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z "$(eval "echo \${$OPTIND}")" ]; do
                name+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
        ;;

        b)
            bundle="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z "$(eval "echo \${$OPTIND}")" ]; do
                bundle+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
            run=1
        ;;

        p)
            displayname="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z "$(eval "echo \${$OPTIND}")" ]; do
                displayname+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
            run=1
        ;;

        i)
            ipadir="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z "$(eval "echo \${$OPTIND}")" ]; do
                ipadir+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
            ipadir="$(expand "$ipadir" -f)"
        ;;

        o)
            outdir="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z "$(eval "echo \${$OPTIND}")" ]; do
                outdir+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
        ;;

        c)
            c="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z "$(eval "echo \${$OPTIND}")" ]; do
                c+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
            run=1
        ;;

        f) 
            temp_files=( "$OPTARG" )
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z "$(eval "echo \${$OPTIND}")" ]; do
                temp_files+=( "$(eval "echo \${$OPTIND}")" )
                OPTIND=$((OPTIND + 1))
            done
            run=1
        ;;

        x)
            if [ "$os" != "iOS" ]; then
                echo "-x is not supported on your platform"
                exit 1
            fi
            appleid="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z "$(eval "echo \${$OPTIND}")" ]; do
                password="$(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
        ;;

        u) u=1 && run=1 ;;
        v) v="-v" ;;
        a) a=1
            if [ "$os" != "iOS" ]; then
                echo "-a is not supported on your platform"
                exit 1
            fi
            pswd="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z "$(eval "echo \${$OPTIND}")" ]; do
                pswd+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
        ;;

        e) e=1 && run=1 ;;
        w) w=1 && run=1 ;;
        S) fakesign=1 && run=1 ;;
        
        l)
            if [ "$os" != "iOS" ]; then
                echo "-l is not supported on your platform"
                exit 1
            fi
            l=1
        ;;
        
        m)
           if [ "$os" != "iOS" ]; then
                echo "-m is not supported on your platform"
                exit 1
            fi
            m=1
        ;;
        
        g)
            if [ "$os" != "iOS" ]; then
                echo "-g is not supported on your platform"
                exit 1
            fi
            g=1
        ;;
        
        z)
            if [ "$os" != "iOS" ]; then
                echo "-z is not supported on your platform"
                exit 1
            fi
            z=1
        ;;

        h)
            echo "Azule 0.1.9"
            echo "Mandatory Arguements:"
            echo "  -i [Path/BundleID]           Specify the path to the IPA to patch"
            echo "  -o [Path]                    Specify an output directory"
            echo
            echo "Optional Arguements:"
            echo "  -n [Name]                    Specify an Output Name"
            echo "  -f [Paths/Bundle IDs]        Specify the files or tweak Bundle IDs to import"
            echo "  -c [Version]                 Set custom version for output ipa"
            echo "  -b [BundleId]                Set custom BundleID for output ipa"
            echo "  -p [Name]                    Set custom Display Name for output ipa"
            echo "  -u                           Remove UISupportedDevices from app"
            echo "  -v                           Enable Verbose Mode"
            echo "  -S                           Fakesigns iPA for use with AppSync"
            echo "  -e                           Removes App Extensions"
            echo "  -w                           Removes Watch App"
            
            if [ "$os" == "iOS" ]; then
                echo "  -x [Apple ID] [Password]     Fetch and decrypt iPA"
                echo "  -a [Root Password]           Use APT instead of Parcility"
                echo "  -g                           Use Flexdecrypt instead of bfdecrypt for decryption"
                echo "  -m                           Enforce Updating Apps Before Decrypting"
                echo "  -l                           Don't Update Outdated Apps"
                echo "  -z                           Don't Update APT Sources (Used With -a)"
            fi
            
            echo
            echo "Examples:"
            echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f ~/Foo.dylib ~/Foo.bundle"
            echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f com.bar.foo -d Foo.dylib"
            echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f ~/Foo.framework com.bar.foo -d Foo.dylib"
            echo
            echo "  -h                           Print this help menu"
            exit 1
            ;;
        *)
            echo "Invalid option: $*. Run "azule -h" to print the help menu."
            exit 1
            ;;
    esac
done

# READING OUTPUT DIRECTORY
if [ -z "$outdir" ]; then while
    printf 'Output Directory: '
    read -r tmp
    outdir="$(eval "echo $tmp")"
    [ -z "$outdir" ] && echo "No Output Directory Specified"
do true; done; fi

# READING IPA
if [ -z "$ipadir" ]; then while
    printf 'Path to IPA: '
    read -r tmp
    ipadir="$(expand "$(eval "echo \$tmp")" -f)"
    [ -z "$ipadir" ] && echo "No iPA Specified"
do true; done; fi

if [ ! -e "$ipadir" ]; then
    if [ "$os" != "iOS" ]; then
        echo "Invalid iPA"
        exit 1
    else
        # CHECK FOR UPDATES
        latestv="$(curl -s "http://itunes.apple.com/lookup?bundleId=$ipadir" | jq -r '.results[].version')"
    
        if [ -z "$latestv" ]; then
            echo "Invalid App"
            exit 1
        fi
        drun=1
    fi
fi

# GUI
if [[ -z "$run" && -z "$drun" ]]; then
    PS3=$'Choose Arguements: '
    arguements=(
    "Inject Tweaks"
    "Change Display Name"
    "Change App Version"
    "Change BundleID"
    "Remove UISupportedDevices"
    "Fakesign iPA"
    "Remove App Extensions"
    "Remove Watch App"
    "Run With Verbose Mode"
    "Set Custom Output Name"
    )

    if [ "$os" == "iOS" ]; then
        arguements+=(
        "Do Not Update Outdated Apps"
        "Force Update Apps"
        "Decrypt Apps through Flexdecrypt"
        "Use APT instead of Parcility"
        "Don't Update APT Sources"
        )
    fi

    arguements+=( "Done" )
    select i in "${arguements[@]}"; do
        case "$i" in
            "Inject Tweaks")
                if [ -z "$files" ]; then while
                    printf 'Files or Tweak IDs: '
                    read -r tmp
                    temp_files=( $(eval "echo $tmp") )
                    [ -z "$temp_files" ] && echo "No Files Provided"
                do true; done; fi
                run=1
            ;;

            "Set Custom Output Name")
                if [ -z "$name" ]; then while
                    printf 'New Display Name: '
                    read -r tmp
                    name=$(eval "echo \$tmp")
                    [ -z "$name" ] && echo "No Display Name Provided"
                do true; done; fi
            ;;

            "Change Display Name")
                if [ -z "$displayname" ]; then while
                    printf 'New Display Name: '
                    read -r tmp
                    displayname=$(eval "echo \$tmp")
                    [ -z "$displayname" ] && echo "No Display Name Provided"
                do true; done; fi
                run=1
            ;;

            "Change App Version")
                if [ -z "$c" ]; then while
                    printf 'New Version: '
                    read -r tmp
                    c=$(eval "echo \$tmp")
                    [ -z "$c" ] && echo "No Version Provided"
                do true; done; fi
                run=1
            ;;

            "Change BundleID")
                if [ -z "$bundle" ]; then while
                    printf 'New BundleID: '
                    read -r tmp
                    bundle=$(eval "echo \$tmp")
                    [ -z "$bundle" ] && echo "No BundleID Provided"
                do true; done; fi
                run=1
            ;;

            "Remove UISupportedDevices")
                u=1
                run=1
            ;;

            "Use APT instead of Parcility")
                a=1
                if [ -z "$pswd" ]; then
                    printf 'Root Password (Leave Empty for Default): '
                    read -r tmp
                    pswd=$(eval "echo \$tmp")
                fi
            ;;

            "Fakesign iPA")
                fakesign=1
                run=1
            ;;

            "Do Not Update Outdated Apps") l=1 ;;
            
            "Don't Update APT Sources") z=1 ;;
                    
            "Force Update Apps") m=1 ;;
            
            "Decrypt Apps through Flexdecrypt") g=1 ;;

            "Run With Verbose Mode") v="-v" ;;

            "Remove Watch App")
                w=1
                run=1
            ;;

            "Remove App Extensions")
                e=1
                run=1
            ;;

            "Done") break ;;
        esac
    done
fi

# VARIABLE CHECK
if ! [[ -n "$run" || -n "$drun" ]]; then
    echo "Insufficient Arguements"
    echo "Run "azule -h" for usage instructions"
    exit 1
fi

# SETTING OUTPUT DIRECTORY AND NAME
outdir="$(expand "$outdir")"
if [ ! -d "$outdir" ]; then
    if [ "${outdir: -4}" == ".ipa" ]; then
        output="$outdir"
    else
        if [ -z "$name" ]; then
            name="$(basename "$ipadir")"
            for i in "${files[@]}"; do
                name+="+$(basename "$i")"
            done
        fi
        output="$outdir/$name.ipa"
    fi
else
    if [ -z "$name" ]; then
        name="$(basename "$ipadir")"
        for i in "${files[@]}"; do
            name+="+$(basename "$i")"
        done
    fi
    output="$outdir/$name.ipa"
fi

# CREATING OUTPUT DIRECTORY
mkdir -p "$(dirname "$output")"
Verbose "iPA will be written to $(eval echo "$output")" "$(eval echo "$output") is an invalid output path" -v

# CREATING .TMP DIRECTORIES
dir="$(mktemp -d)"

tweakid="$RANDOM"
mkdir -p "$dir/$tweakid/Tweak"
Verbose "$dir/$tweakid/Tweak has been created" "Couldn't create $dir/$tweakid/Tweak" -v

cd "$dir/$tweakid" || exit

# DECRYPTION
if [ -n "$drun" ]; then

    # GET BINARY
    
    while read -r i; do
        if [ "$(ExtractPlistValue MCMMetadataIdentifier "$i")" = "$ipadir" ]; then
            bfplist="$(find "$(dirname "$i")"/*.app/ -maxdepth 1 -name Info.plist)"
            bfbinary="$(dirname "$bfplist")/$(ExtractPlistValue CFBundleExecutable "$bfplist")"
            break
        fi
    done < <(find /var/containers/Bundle/Application -name .com.apple.mobile_container_manager.metadata.plist)

    currentv="$(ExtractPlistValue CFBundleVersion "$bfplist")"

    if [ -n "$currentv" ]; then l+=1; fi

    # INSTALL UPDATES
    if [[ "$latestv" != "$currentv" && "$l" != "11" ]] || [ -n "$m" ]; then

        # VARIABLE CHECK
        if [ -z "$appleid" ]; then while
            printf 'Apple ID: '
            read -r appleid
            [ -z "$appleid" ] && echo "No Apple ID Provided"
        do true; done; fi

        if [ -z "$password" ]; then while
            printf 'Password for Apple ID: '
            read -r password
            [ -z "$password" ] && echo "No Password Provided"
        do true; done; fi

        if ! ipatool-azule download -b "$ipadir" -e "$appleid" -p "$password"; then exit 1; fi
        
        appinst "$dir/$tweakid"/*.ipa

        while read -r i; do
            if [ "$(ExtractPlistValue MCMMetadataIdentifier "$i")" = "$ipadir" ]; then
                bfplist="$(find "$(dirname "$i")"/*.app/ -maxdepth 1 -name Info.plist)"
                bfbinary="$(dirname "$bfplist")/$(ExtractPlistValue CFBundleExecutable "$bfplist")"
                break
            fi
        done < <(find /var/containers/Bundle/Application -name .com.apple.mobile_container_manager.metadata.plist)
    fi

    if [ -n "$g" ]; then

        # FLEXDECRYPT

        while read -r i; do
            if [ "$(ExtractPlistValue MCMMetadataIdentifier "$i")" = "$ipadir" ]; then
                echo "Preparing App..."
                mkdir -p Payload
                rsync -a "$(dirname "$i")"/*.app Payload
                unzipped=1
                break
            fi
        done < <(find /var/containers/Bundle/Application -name .com.apple.mobile_container_manager.metadata.plist)
    
        if [ -z "$unzipped" ]; then
            echo "Couldn't find app"
            exit 1
        fi
    
        # REMOVING PLUGINS
        if [ -n "$e" ]; then
            echo "Removing Extensions..."
            while read -r i; do
                rm -rf "$i"
            done < <(find "$dir/$tweakid" -mindepth 3 -type d -name PlugIns)
            Verbose "Removed Extensions" "Couldn't Remove Extensions"
            e=2
        fi

        # REMOVING WATCH APP
        if [ -n "$w" ]; then
            echo "Removing Watch App..."
            find "$dir/$tweakid" -mindepth 3 -maxdepth 3 -type d -name Watch -exec rm -rf "{}" \;
            Verbose "Removed Watch App" "Couldn't Remove Watch App"
            w=2
        fi

        while read -r i; do
            CFBundleExecutable="$(ExtractPlistValue CFBundleExecutable "$i")"
            if [[ -n "$CFBundleExecutable" && "$(otool -l "$(dirname "$i")/$CFBundleExecutable" | grep "cryptid 1")" ]]; then
                if [ -z "$ran" ]; then
                    echo "Decrypting App..."
                fi

                flexdecrypt "$(dirname "$i")/$CFBundleExecutable" --output "$(dirname "$i")/$CFBundleExecutable" &>/dev/null
                Verbose "Decrypted $CFBundleExecutable" "Couldn't Decrypt $CFBundleExecutable" -v
                ran=1
            fi
        done < <(find Payload/*.app -name "Info.plist")
    
        if [ -n "$ran" ]; then
            echo "Decrypted App"
        else
            echo "App Was Not Encrypted"
        fi
    else
    
        # BFDECRYPT
        
        while read -r i; do
            if [ "$(ExtractPlistValue MCMMetadataIdentifier "$i")" = "$ipadir" ]; then
                bfipadir="$(dirname "$i")/Documents/decrypted-app.ipa"
                break
            fi
        done < <(find /var/mobile/Containers/Data/Application -name .com.apple.mobile_container_manager.metadata.plist 2>/dev/null)

        # PRE CLEANUP
        find /var/mobile/Containers/Data/Application/ -name decrypted-app.ipa &>/dev/null -exec rm -rf "{}" \;

        # BFDECRYPT SETUP
        if ! [[ "$(ExtractPlistValue selectedApplications /var/mobile/Library/Preferences/com.level3tjg.bfdecrypt.plist key)" =~ $ipadir ]]; then
            cp /var/mobile/Library/Preferences/com.level3tjg.bfdecrypt.plist "$dir/$tweakid/bfbackup.plist"
            plutil -value "$ipadir" -arrayadd -key selectedApplications /var/mobile/Library/Preferences/com.level3tjg.bfdecrypt.plist >/dev/null
        fi

        # KILL APP
        PID=$(ps awwwx|grep "$bfbinary"|grep container|grep '.app'|grep -v grep|sed 's/^\ *//g'|cut -f1 -d\ )
        if [ -n "$PID" ]; then
            kill -9 "$PID"
        fi

        # LAUNCH APP
        open "$ipadir"

        # WAIT FOR IPA
        until [ -e "$bfipadir" ]; do :; done
        while [ -d "$(dirname "$bfipadir")/ipa" ]; do :; done

        # KILL APP
        PID=$(ps awwwx|grep "$bfbinary"|grep container|grep '.app'|grep -v grep|sed 's/^\ *//g'|cut -f1 -d\ )
        kill -9 "$PID" &>/dev/null

        # SET NEW IPADIR
        ipadir="$bfipadir"

        # CLEANUP
        if [ -e "$dir/$tweakid/bfbackup.plist" ]; then
            mv "$dir/$tweakid/bfbackup.plist" /var/mobile/Library/Preferences/com.level3tjg.bfdecrypt.plist
        fi
    fi
fi

# VERBOSE
if [ -n "$v" ]; then
    if [[ -n "$unzipped" || -n "$bfipadir" ]]; then
        echo "Decrypted $ipadir"
    else
        echo "Path to iPA is $ipadir"
    fi
fi

# EXTRACTING IPA
if [[ -n "$run" && -z "$unzipped" ]]; then
    echo "Extracting iPA..."
    unzip -q "$ipadir" -d "$dir/$tweakid"
    Verbose "IPA extracted" "Couldn't extract IPA"
fi

if [ -z "$bfipadir" ]; then
    rm -rf "$bfipadir"
fi

# REMOVING PLUGINS
if [ "$e" == "1" ]; then
    echo "Removing Extensions..."
    while read -r i; do
        rm -rf "$i"
    done < <(find "$dir/$tweakid" -mindepth 3 -type d -name PlugIns)
    Verbose "Removed Extensions" "Couldn't Remove Extensions"
fi

# REMOVING WATCH APP
if [ "$w" == "1" ]; then
    echo "Removing Watch App..."
    find "$dir/$tweakid" -mindepth 3 -maxdepth 3 -type d -name Watch -exec rm -rf "{}" \;
    Verbose "Removed Watch App" "Couldn't Remove Watch App"
fi

# SETTING APP EXECUTABLE
executable="Payload/$(basename Payload/*.app)/$(ExtractPlistValue CFBundleExecutable Payload/*.app/Info.plist)"
Verbose "App executable is $executable" "Couldn't set app executable" -v

# ENCRYPTION CHECK
while read -r i; do
    CFBundleExecutable="$(ExtractPlistValue CFBundleExecutable "$i")"
    if [[ -n "$CFBundleExecutable" && -n "$(otool -l "$(dirname "$i")/$CFBundleExecutable" | grep "cryptid 1")" ]]; then
        if [[ "$(dirname "$i")/$CFBundleExecutable" =~ .app/Frameworks || "$(dirname "$i")/$CFBundleExecutable" == "$executable" ]]; then
            echo "Fatal Error: $(dirname "$i")/$CFBundleExecutable is encrypted"
            exit 1
        else
            if [ -n "$v" ]; then
                echo "$(dirname "$i")/$CFBundleExecutable is encrypted. This may cause problems later on"
            fi
        fi
    fi
done < <(find Payload/*.app -name "Info.plist")

# PROCESSING FILES
if [ -n "$temp_files" ]; then

    for i in "${!temp_files[@]}"; do
        x="$i"
        unset indexes[@]
        while [[ "$x" -lt "${#temp_files[@]}" ]]; do
            indexes+=( "$x" )
            string+=" ${temp_files[x]}"
            if [ -e "$(expand "$string")" ] && [[ -z "${temp_files[x+1]}" || ! -e "$(expand "$string ${temp_files[x+1]}")" ]]; then

                # VERBOSE
                if [ -n "$v" ]; then
                    echo "$(expand "$string") will be imported"
                fi

                case "$(expand "$string")" in
                    *.deb) ExtractDEB "$i" ;;

                    *.dylib)
                        rsync -a "$i" "$dir/$tweakid/Tweak"
                        Verbose "Copied $(basename "$i") to work directory" "Couldn't Copy $(basename "$i") to work directory" -v
                    ;;

                    *.framework)
                        rsync -a "$i" "$dir/$tweakid/Tweak"
                        Verbose "Moved $(basename "$i") to work directory" "Couldn't Move $(basename "$i") to work directory" -v
                    ;;

                    *)
                        rsync -a "$i" Payload/*.app
                        Verbose "Moved $(basename "$i") to app directory" "Couldn't Move $(basename "$i") to app directory"
                    ;;
                esac

                for g in "${indexes[@]}"; do
                    unset temp_files[g]
                done
                unset indexes[@]
            fi
            x=$((x + 1))
        done
        unset string
    done

    
    for i in "${temp_files[@]}"; do
    
        # FETCHING DEBS
        if [ "$os" == "iOS" ] && [ -n "$a" ]; then
            if [ -z "$rcount" ]; then
            
                # SET ROOT PASSWORD
                if [ -z "$pswd" ]; then
                    pswd="alpine"
                fi
                    
                if [ -z "$z" ]; then
                    echo "Updating Sources..."
                    echo "$pswd" | sudo -S apt-get update --allow-insecure-repositories &>/dev/null
                    Verbose "Successfully Refreshed Sources" "Couldn't Refresh Sources"
                fi
                
                while read -r g; do echo "$pswd" | sudo -S rm -rf "$g"; done < <(find "/var/cache/apt/archives" -maxdepth 1 -iname '*.deb')
            fi
            rcount=1
            echo "Fetching $i"
            echo "$pswd" | sudo -S apt-get install --download-only "$i" -y --allow-unauthenticated &>/dev/null
            Verbose "Fetched $i" "Couldn't Fetch $i"
            
            while read -r g; do
                ExtractDEB "$g"
                echo "$pswd" | sudo -S rm -rf "$g"
            done < <(find "/var/cache/apt/archives" -maxdepth 1 -iname '*.deb')
        else
            if [ "$(curl -sS https://api.parcility.co/db/package/"$i" | jq -r .status)" = "true" ]; then
                ExtractDEB "$i" fetch
            else
                echo "$i couldn't be found"
                exit
            fi
        fi
    done

    # SPECIFYING DYLIBS
    while read -r i; do dylibs+=("$i"); done < <(find "$dir/$tweakid/Tweak" ! -type l -iname '*.dylib' ! -path '*.bundle/*' ! -path '*.framework/*')

    # DYLIB SELECTION
    for i in "${dylibs[@]}"; do
        if ! [ -e "${i%.*}.plist" ]; then
            inject+=( "$(basename "$i")" )
        else
            identifier="$(ExtractPlistValue Filter "${i%.*}".plist)"
            idtype="$(ExtractPlistValue Filter "${i%.*}".plist key)"

            case "$idtype" in
                Bundles)
                    ipabundleid="$(ExtractPlistValue CFBundleIdentifier Payload/*.app/Info.plist)"
                    
                    if [[ "$identifier" =~ $ipabundleid ]]; then
                        inject+=( "$(basename "$i")" )
                    fi
                ;;

                Executables)
                    if [[ "$identifier" =~ $(basename "$executable") ]]; then
                        inject+=( "$(basename "$i")" )
                    fi
                ;;
                
            esac
        fi
    done

    # INJECTING DYLIBS
    for i in "${inject[@]}"; do
        find "$dir/$tweakid/Tweak" ! -type l -name "$i" ! -path '*.bundle/*' ! -path '*.framework/*' -exec rsync -a {} Payload/*.app/Frameworks \;
        Verbose "Copied $(basename "$i") to app directory" "$(basename "$i") couldn't be copied to app directory" -v

        insert_dylib --inplace --weak --all-yes @rpath/"$i" "$executable" &> /dev/null
        Verbose "Injected $i" "Couldn't inject $i"
    done

    # MOVING BUNDLES
    while read -r i; do
        rsync -a "$i" Payload/*.app/
        Verbose "Copied $(basename "$i") to app directory" "$(basename "$i") couldn't be copied to app directory"
    done < <(find "$dir/$tweakid/Tweak" ! -type l -iname '*.bundle' ! -path '*.bundle/*' ! -path '*.framework/*')

    # MOVING FRAMEWORKS TO APP DIRECTORY
    while read -r i; do
        if [ -e "$i/Info.plist" ]; then
            rsync -a "$i" Payload/*.app/Frameworks
            Verbose "Copied $(basename "$i") to app directory" "$(basename "$i") couldn't be copied to app directory"
            inject+=( "$(basename "$i")/$(ExtractPlistValue CFBundleExecutable "$i/Info.plist")" )
        fi
    done < <(find "$dir/$tweakid/Tweak" ! -type l -iname '*.framework' ! -path '*.bundle/*' ! -path '*.framework/*')

    # FIXING LINKS
    for i in "${inject[@]}"; do
        ldid -r Payload/*.app/Frameworks/"$i"
        Verbose "Codesign stripped from $i" "Couldn't strip codesign from $i" -v

        while read -r p; do links+=("$p"); done < <(otool -L Payload/*.app/Frameworks/"$i" | sort -u | cut -d ' ' -f1)
        for l in "${links[@]}"; do
            for x in "${inject[@]}"; do
                if [[ "$l" =~ $x ]]; then
                    if [[ "$l" =~ $i ]]; then
                        install_name_tool -id @rpath/"$i" Payload/*.app/Frameworks/"$i" &>/dev/null
                        tid=$(( tid + $? ))
                        break
                    else
                        install_name_tool -change "$l" @rpath/"$x" Payload/*.app/Frameworks/"$i" &>/dev/null
                        tlnk=$(( tlnk + $? ))
                        break
                    fi
                fi
            done
        done
    done

    # VERBOSE
    if [[ "$tid" = 0 || -z "$tid" ]]; then
        echo "ID Successful"
    else
        echo "$tid file(s) failed to ID"
    fi

    if [[ "$tlnk" = 0 || -z "$tlnk" ]]; then
        echo "Re-Link Successful"
    else
        echo "$tlnk Re-Links failed"
    fi

    # INJECT HOOKING LIBRARY
    hookinglibrary="CydiaSubstrate.framework"

    if [ "$os" == "iOS" ]; then
        rsync -a "/var/mobile/Azule/$hookinglibrary" Payload/*.app/Frameworks
    else
        if ! rsync -a "$AZULE/$hookinglibrary" Payload/*.app/Frameworks &>/dev/null; then
            echo "Hooking Library not downloaded, please run setup-azule."
            exit 1
        fi
    fi

    if [ -d Payload/*.app/Frameworks/"$hookinglibrary" ]; then
        hookinglibrary="$hookinglibrary/$(ExtractPlistValue CFBundleExecutable Payload/*.app/Frameworks/"$hookinglibrary"/Info.plist)"
    fi

    for i in "${inject[@]}"; do
        while read -r q; do links+=("$q"); done < <(otool -L Payload/*.app/Frameworks/"$i" | sort -u | cut -d ' ' -f1)
        for l in "${links[@]}"; do
            if [[ "$l" =~ CydiaSubstrate.framework/CydiaSubstrate || "$l" =~ libsubstrate.dylib || "$l" =~ libsubstitute.dylib ]]; then
                install_name_tool -change "$l" @rpath/"$hookinglibrary" Payload/*.app/Frameworks/"$i" &>/dev/null
                status=$(( status + $? ))
                break
            fi
        done
    done

    # VERBOSE
    if [[ "$status" = 0 || -z "$status" ]]; then
        echo "Successfully injected $hookinglibrary"
    else
        echo "Failed injecting $hookinglibrary in $status file(s)"
    fi
fi

# REMOVING UISUPPORTEDDEVICES

if [ -n "$u" ]; then
    UISupportedDevices="$(ExtractPlistValue UISupportedDevices Payload/*.app/Info.plist)"
    if [ -n "$UISupportedDevices" ]; then
        RemovePlistKey UISupportedDevices Payload/*.app/Info.plist
        Verbose "Removed UISupportedDevices from app" "Couldn't remove UISupportedDevices from app"
    else
        echo "The specified iPA doesn't have UISupportedDevices"
    fi
fi

# CHANGING BUNDLEID

if [ -n "$bundle" ]; then
    ReplacePlistValue "$bundle" CFBundleIdentifier Payload/*.app/Info.plist
    Verbose "Changed App BundleID to $bundle" "Couldn't Change App BundleID"
fi

# CHANGING DISPLAY NAME

if [ -n "$displayname" ]; then
    ReplacePlistValue "$displayname" CFBundleDisplayName Payload/*.app/Info.plist
    Verbose "Changed App Display Name to $displayname" "Couldn't Change App Display Name"
fi

# CHANGING VERSION

if [ -n "$c" ]; then
    ReplacePlistValue "$c" CFBundleVersion Payload/*.app/Info.plist
    ReplacePlistValue "$c" CFBundleShortVersionString Payload/*.app/Info.plist
    Verbose "Changed App Version to $c" "Couldn't Change App Version"
fi

# FAKESIGNING

if [ -n "$fakesign" ]; then
    echo "Fakesigning iPA..."
    ldid -S -M Payload/* &>/dev/null
    Verbose "Fakesigned iPA" "Couldn't Fakesign iPA"
fi

# WRAPPING UP

if [ -n "$run" ] || [ -n "$unzipped" ]; then
    echo "Generating iPA..."
    eval "zip -rq '$output' Payload"
else
    mv "$ipadir" "$output"
fi
Verbose "Generated IPA at $output" "Couldn't generate IPA"

cleanup
