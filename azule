#!/bin/zsh

while getopts n:i:o:f:d: args; do
    case "$args" in
        n) tweakname=${OPTARG};;
        i) ipadir=${OPTARG};;
        o) outdir=${OPTARG};;
        f) files=("$OPTARG")
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                files+=($(eval "echo \${$OPTIND}"))
                OPTIND=$((OPTIND + 1))
            done
            ;;
            
        d) dylibs=("$OPTARG")
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                dylibs+=($(eval "echo \${$OPTIND}"))
                OPTIND=$((OPTIND + 1))
            done
            ;;
            
        *)
            echo "Usage: azule [-n Name] [-i path] [-f paths/bundleids] [-d name]"
            echo "  -n     Specify the Project Name."
            echo "  -i     Specify the path to the IPA you wish to patch."
            echo "  -o     Specify an Output Directory."
            echo "  -f     Specify the Files or Tweak Bundle IDs you wish to import."
            echo "  -d     From the .deb files imported, specify the names of the dylibs(e.g: Cercube.dylib) you wish to inject."
            echo
            exit 1
            ;;
    esac
done

# DECLARE $TWEAKNAME
if [ -z "$tweakname" ]; then; while
    printf 'Project Name: '
    read -r tweakname
    [ -z "$tweakname" ] && echo 'Nice try. Now name your project.'
do true; done; fi

# GET IPA
if [ -z "$ipadir" ]; then; while
    printf 'Path to IPA: '
    read ipadir
    [ -z "$ipadir" ] && echo 'I kind of need the IPA to make your app...'
do true; done; fi

# SET OUTPUT DIRECTORY
if [ -z "$outdir" ]; then; while
    printf 'Output Directory: '
    read outdir
    [ -z "$outdir" ] && echo 'What am I supposed to do with your app then?'
do true; done; fi

# GET FILES
if [ -z "$files" ]; then; while
    printf 'Files or Tweak IDs: '
    read files
    [ -z "$files" ] && echo 'You want me to not touch your app? Impossible.'
do true; done; fi

# MAKE .TMP
dir=$AZULE/Work
mkdir -p "$dir"/"$tweakname"/Tweak
cd "$dir"/"$tweakname"

# EXTRACT IPA
eval "unzip -q "$ipadir" -d "$dir/$tweakname""
executable=(Payload/*.app/$(/usr/libexec/PlistBuddy -c "Print :CFBundleExecutable" Payload/*.app/Info.plist))

for i in $(echo $files ); do
    if [[ -f "$i" || -d "$i" ]]; then
        case "$i" in
            *.deb) dpkg -x "$i" Tweak ;;
            
            *.dylib)
                rsync -a "$i" Payload/*.app/Frameworks
                $AZULE/insert_dylib --inplace --all-yes "@rpath/$(basename "$i")" "$executable" >> /dev/null
                chain+=( $(basename "$i") )
                ;;

            *.framework)
                rsync -a "$i" Payload/*.app/Frameworks
                chain+=( "$(basename "$i")/$(/usr/libexec/PlistBuddy -c "Print :CFBundleExecutable" "$i"/Info.plist)" )
                ;;
            
            *) rsync -a "$i" Payload/*.app ;;
        esac
    else
        if [ "$(curl -s "https://api.parcility.co/db/package/$i" | jq -r '.status')" = "true" ]; then
           dpkg -x <(curl -sL "$dir"/"$tweakname"/$i.deb "$(curl -s "https://api.parcility.co/db/package/$i" | jq -r '.data.repo.url + .data.builds[-1].Filename')") "$dir"/"$tweakname"/Tweak
        else
            echo ""$i" isn't available on Parcility. Try manually getting the files to inject."
        fi
    fi
done

# SPECIFY DYLIBS
if [ -z "$dylibs" ]; then
    if [ -n "$(ls -A "$dir"/"$tweakname"/Tweak 2>/dev/null)" ]; then
        export COLUMNS=1
        dylibs=( $(find -E "$dir"/"$tweakname"/Tweak -iname '*.dylib' -exec basename {} \;) 'Done' )
        echo 'Available Dylibs: '
        PS3="Choose Dylibs (recommended): "
        select i in "${dylibs[@]}"; do
            if [ "$i" = "Done" ]; then; break
            else
                find -E "$dir"/"$tweakname"/Tweak -iname "$i" -exec rsync -a {} Payload/*.app/Frameworks \;
                $AZULE/insert_dylib --inplace --all-yes "@rpath/$i" "$executable" >> /dev/null
                chain+=( "$i" )
            fi
        done
    fi
else
    for i in "${dylibs[@]}"; do
        find -E "$dir"/"$tweakname"/Tweak -iname "$i" -exec rsync -a {} Payload/*.app/Frameworks \;
        $AZULE/insert_dylib --inplace --all-yes "@rpath/$i" "$executable" >> /dev/null
        chain+=( "$i" )
    done
fi

# MOVE BUNDLES
find -E "$dir"/"$tweakname"/Tweak -iname '*.bundle' ! -iregex '.*\.(bundle)/.+' -exec rsync -a {} Payload/*.app \;

# FIX LINKS
frameworks+=( $(find -E "$dir"/"$tweakname"/Tweak -iname '*.framework') $AZULE/CydiaSubstrate.framework )
for i in "${frameworks[@]}"; do
    rsync -a "$i" Payload/*.app/Frameworks
    chain+=( "$(basename "$i")/$(/usr/libexec/PlistBuddy -c "Print :CFBundleExecutable" "$i"/Info.plist)" )
done

for i in "${chain[@]}"; do
    codesign --remove-signature Payload/*.app/Frameworks/"$i"
    links=( $(otool -L Payload/*.app/Frameworks/"$i" | cut -d ' ' -f1) )
    for u in "${links[@]}"; do
        for x in "${chain[@]}"; do
            if [[ "$u" =~ "$x" ]]; then
                install_name_tool -change "$u" @rpath/"$x" Payload/*.app/Frameworks/"$i"
            fi
        done
    done
done

# WRAPPING UP
eval "zip -rqX "$outdir/$tweakname.ipa" Payload"
rm -rf "$dir"
