#!/bin/bash

shopt -s extglob

# SET INITIAL DIRECTORIES
rootdir="$PWD"
empty_dir="$(mktemp -d)"
cd "$empty_dir" || exit

# SET PLATFORM
case "$(uname -s)" in
    "Linux") os="Linux" ;;
    "Darwin")
        case "$(uname -m)" in
            "arm64"|"x86_64") os="MacOS" ;;
            *) os="iOS" ;;
        esac
    ;;
esac

# PLATFORM-SPECIFIC VARIABLES
case "$os" in
    MacOS)
        # Add tweak tools to PATH
        if [ -d "$AZULE/bin/darwin" ] ; then
            PATH="$AZULE/bin/darwin:$PATH"
        fi
    ;;

    Linux)
        # Add tweak tools to PATH
        if [ -d "$AZULE/bin/linux" ] ; then
            PATH="$AZULE/bin/linux:$PATH"
        fi
        # Add toolchain to PATH
        if [ -d "$AZULE/toolchain/bin" ] ; then
            PATH="$AZULE/toolchain/bin:$PATH"
        fi
    ;;
esac

# PLATFORM-SPECIFIC FUNCTIONS
case "$os" in

    iOS)
        RemovePlistKey () {
            plutil -remove -key "$1" "$2" &>/dev/null
        }

        ReplacePlistValue () {
            plutil -value "$1" -key "$2" "$3" &>/dev/null
        }

        ExtractPlistValue () {
            if ! plutil -key "$1" "$2" >> tmp 2>/dev/null; then
                rm tmp &>/dev/null
                return 1
            fi

            plutil -convert xml1 tmp &>/dev/null

            if [ -n "$3" ]; then
                sed -n "s/.*<key>\(.*\)<\/key>.*/\1/p" tmp
            else
                sed -n "s/.*<string>\(.*\)<\/string>.*/\1/p" tmp
            fi
            rm tmp &>/dev/null
        }

        ExtractDEB () {
            if [ "$2" = "fetch" ]; then
                Verbose "Fetching $1..." -a
                curl -sSL "$(curl -sS https://api.parcility.co/db/package/"$1" | jq -r '.data.repo.url + .data.builds[-1].Filename')" -o "tweak.deb"
                Verbose "Fetched $1" "Couldn't fetch $1" 1 -e -r -i
                Verbose "Extracting $1..." -a
                imported_debs+=( "$(dpkg -f "tweak.deb" Package)" )
                dpkg -x "tweak.deb" "$dir/$tweakid/Tweak"
                Verbose "Extracted $1.deb" "Couldn't extract $1.deb" 2 -r -e -i
            else
                Verbose "Extracting $(basename "$1")..." -a
                imported_debs+=( "$(dpkg -f "$1" Package)" )
                dpkg -x "$1" "$dir/$tweakid/Tweak"
                Verbose "Extracted $(basename "$1")" "Couldn't extract $(basename "$1")" 3 -r -e -i
            fi
        }
    ;;

    MacOS|Linux)
        RemovePlistKey () {
            plutil -remove "$1" "$2" &>/dev/null
        }

        ReplacePlistValue () {
            plutil -replace "$2" -string "$1" "$3" &>/dev/null
        }

        ExtractPlistValue () {
            if [ -n "$3" ]; then
                psed="key"
            else
                psed="string"
            fi
            plutil -extract "$1" xml1 -o - "$2" | sed -n "s/.*<$psed>\(.*\)<\/$psed>.*/\1/p" 2>/dev/null
        }

        ExtractDEB () {
            origin_dir="$PWD"
            TMP=$(mktemp -d)
            cd "$TMP" || exit
            if [ "$2" = "fetch" ]; then
                Verbose "Fetching $1..." -a
                curl -sSL "$(curl -sS https://api.parcility.co/db/package/"$1" | jq -r '.data.repo.url + .data.builds[-1].Filename')" -o "tweak.deb"
                Verbose "Fetched $1" "Couldn't fetch $1" 1 -r -e "$TMP" -i
                ar -x "tweak.deb"
                status="$?"
                Verbose "Extracted $(basename "$1") [ar]" "Couldn't extract $(basename "$1") [ar]" 4 -v -e -r "$TMP" -i -x
            else
                ar -x "$1"
                status="$?"
                Verbose "Extracted $(basename "$1") [ar]" "Couldn't extract $(basename "$1") [ar]" 4 -v -e -r "$TMP" -i -x
            fi
            Verbose "Extracting $(basename "$1")..." -a
            tar -C "$dir/$tweakid/Tweak" -xf data.tar.*
            Verbose "Extracted $(basename "$1")" "Couldn't extract $(basename "$1")" 5 -r -e "$TMP" -i
            cd "$origin_dir" || exit
            unset origin_dir
            rm -rf "$TMP"
        }
    ;;
esac

# FUNCTIONS
Verbose () {
    tv="$?"
    unset mute_verbose
    unset injectable
    unset announcement

    if [ -n "$silent_run" ]; then mute_verbose=1; fi
    for p in "$@"; do
        if [ "$p" == "-a" ]; then tv=0 && announcement=1; fi
        if [ "$p" == "-v" ] && [ -z "$verbose" ]; then mute_verbose=1; fi
        if [ "$p" == "-x" ]; then tv="$status" && unset status; fi
        if [ "$p" == "-i" ]; then injectable=1; fi
    done
    
    if [ -z "$tv" ]; then tv=0; fi

    if [ "$tv" == 0 ]; then
        if [ -z "$mute_verbose" ]; then
            echo "$1"
        fi
    else
        echo "$2"
        exit_code="$3"
    fi

    if [ -z "$announcement" ]; then
        for p in "$@"; do
            if [ "$tv" != 0 ]; then 
                if [ -e "$p" ]; then rm -rf "$p"; fi
            fi
        done

        if ! [[ -n "$ignore_injectable_errors" && -n "$injectable" ]]; then
            for p in "$@"; do
                if [ "$tv" != 0 ]; then 
                    if [ "$p" == "-e" ]; then cleanup; fi
                fi
            done
        fi

        for p in "$@"; do
            if [ "$tv" != 0 ]; then 
                if [ "$p" == "-r" ]; then return 1 && cd "$origin_dir" && unset origin_dir; fi
            fi
        done
    else
        for p in "$@"; do
            if [ "$p" == "-k" ]; then
                exit_code="$2"
                cleanup 
            fi
        done
    fi
}

expand () {
    origin_dir="$PWD"
    cd "$empty_dir" || exit
    process_var="$(echo "${1//\\ / }" | xargs)"
    
    if [[ "$process_var" == .* ]]; then
        process_var="$(echo "$process_var" | sed "s|\.|$rootdir|")"
    elif [[ "$process_var" == ~* ]]; then
        process_var="$(echo "$process_var" | sed "s|\~|$HOME|")"
    fi

    if ! [ -e "$process_var" ]; then
        if [ "$2" == "-f" ]; then
            if [ -f "$rootdir/$process_var" ]; then
                process_var="$rootdir/$process_var"
            fi
        elif [ -n "$process_var" ] && [ -e "$rootdir/$process_var" ]; then
            process_var="$rootdir/$process_var"
        fi
    fi
        
    cd "$origin_dir" || exit
    unset origin_dir
    echo "$process_var"
}

cleanup () {
    if [[ "$os" == "iOS" && -e "$dir/$tweakid/bfbackup.plist" ]]; then
        mv "$dir/$tweakid/bfbackup.plist" /var/mobile/Library/Preferences/com.level3tjg.bfdecrypt.plist
    fi
    rm -rf "$dir"
    rm -rf "$empty_dir"
    cd "$rootdir" || exit
    if [ -n "$ignore_errors" ]; then
        exit_code=0
    else
        exit "$exit_code"
    fi
}

help () {
    echo
    echo "Usage: azule [arguements]"
    echo
    echo "Mandatory Arguements:"
    echo "  -i [Path/BundleID]           Specify the path to the IPA to patch"
    echo "  -o [Path]                    Specify an output directory"
    echo
    echo "Optional Arguements:"
    echo "  -n [Name]                    Specify an Output Name"
    echo "  -f [Paths/Bundle IDs]        Specify the files or tweak Bundle IDs to import"
    echo "  -c [Version]                 Set custom version for output ipa"
    echo "  -b [BundleId]                Set custom BundleID for output ipa"
    echo "  -p [Name]                    Set custom Display Name for output ipa"
    echo "  -u                           Remove UISupportedDevices from app"
    echo "  -v                           Enable Verbose Mode"
    echo "  -s                           Silence Everything But Important Errors"
    echo "  -S                           Fakesigns iPA for use with AppSync"
    echo "  -e                           Removes App Extensions"
    echo "  -w                           Removes Watch App"
    echo "  -r                           Skip Encryption Check"
    echo "  -k                           Ignore unfound files to inject"
    echo "  -q                           Ignore errors"
            
    if [ "$os" == "iOS" ]; then
        echo "  -x [Apple ID] [Password]     Fetch and decrypt iPA"
        echo "  -a [Root Password]           Use APT instead of Parcility (Leave Blank for Default Password)"
        echo "  -g                           Use Flexdecrypt instead of bfdecrypt for decryption"
        echo "  -m                           Enforce Updating Apps Before Decrypting"
        echo "  -l                           Don't Update Outdated Apps"
        echo "  -z                           Don't Update APT Sources (Used With -a)"
        echo "  -j                           Don't install package dependencies (Used With -a)"
    fi
            
    echo
    echo "Examples:"
    echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f ~/Foo.dylib ~/Foo.bundle"
    echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f com.bar.foo -d Foo.dylib"
    echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f ~/Foo.framework com.bar.foo -d Foo.dylib"
    echo
    echo "  -h                           Print this help menu"
    echo
    exit_code=0
    exit
}

# CLEAN ON EXIT
trap "cleanup" SIGINT
trap "cleanup" EXIT

# CLI ARGUEMENTS
while getopts an:i:o:c:b:x:f:d:p:huSewsrqjmzkglv args; do

    # STUFF WITH PARAMETERS
    if [[ "$args" == @(x|a|n|b|p|i|o|c|f) ]]; then
        tmp=( "$OPTARG" )
        until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z "$(eval "echo \${$OPTIND}")" ]; do
            tmp+=( "$(eval "echo \${$OPTIND}")" )
            OPTIND=$((OPTIND + 1))
        done
    fi

    # iOS ONLY
    if [[ "$args" == @(a|x|l|m|g|z|j) ]]; then
        if [ "$os" != "iOS" ]; then
            Verbose "-$args is not supported on your platform" 6 -a -k
        fi
    fi

    case "$args" in

        # STUFF WITH PARAMETERS
        n) name="${tmp[*]}" ;;
        b) bundle="${tmp[*]}" && run=1 ;;
        p) displayname="${tmp[*]}" && run=1 ;;
        i) ipadir="$(expand "${tmp[*]}" -f)" ;;
        o) outdir="${tmp[*]}" ;;
        c) custom_version="${tmp[*]}" && run=1 ;;
        f) files=( ${tmp[@]} ) && run=1 ;;
        a) root_password="$(echo "${tmp[*]}" | xargs)" && apt=1 ;;
        x) appleid="${tmp[0]}" && unset "tmp[0]" && appleid_password="${tmp[*]}" ;;

        # SWITCHES
        u) remove_uisd=1 && run=1 ;;
        v) verbose="-v" ;;
        e) remove_extensions=1 && run=1 ;;
        w) remove_watchapp=1 && run=1 ;;
        S) fakesign=1 && run=1 ;;
        r) ignore_encrypted=1 ;;
        s) silent_run=1 ;;
        k) ignore_injectable_errors=1 ;;
        q) ignore_errors=1 ;;

        # iOS ONLY SWITCHES
        j) no_recurse=1 ;;
        l) ignore_outdated=1 ;;
        m) force_update=1 ;;
        g) flexdecrypt=1 ;;
        z) no_apt_update=1 ;;
        
        h) help ;;
        *) echo "Invalid option: $*. Run "azule -h" for help" && exit 1 ;;
    esac
done

# READING OUTPUT DIRECTORY
if [ -z "$outdir" ]; then while
    printf 'Output Directory: '
    read -r outdir
    [ -z "$outdir" ] && echo "No Output Directory Specified"
do true; done; fi

# READING IPA
if [ -z "$ipadir" ]; then while
    printf 'Path to IPA: '
    read -r tmp
    ipadir="$(expand "$tmp")"
    [ -z "$ipadir" ] && echo "No iPA Specified"
do true; done; fi


if [ ! -e "$ipadir" ]; then
    if [ "$os" != "iOS" ]; then
        Verbose "Invalid iPA" 7 -a -k
    else
        # CHECK IF APP IS ON THE APP STORE
        latestv="$(curl -s "http://itunes.apple.com/lookup?bundleId=$ipadir" | jq -r '.results[].version')"
    
        if [ -z "$latestv" ]; then

            # CHECK IF APP IS INSTALLED

            while read -r i; do
                if [ "$(ExtractPlistValue MCMMetadataIdentifier "$i")" = "$ipadir" ]; then
                    status=1
                    break
                fi
            done < <(find /var/containers/Bundle/Application -name .com.apple.mobile_container_manager.metadata.plist)

            if [ -z "$status" ]; then
                Verbose "Invalid App" 8 -a -k
            fi
            ignore_outdated=2
        fi
        drun=1
    fi
fi

# GUI
if [[ -z "$run" && -z "$drun" ]]; then
    PS3=$'Choose Arguements: '
    arguements=(
    "Inject Tweaks"
    "Change Display Name"
    "Change App Version"
    "Change BundleID"
    "Remove UISupportedDevices"
    "Fakesign iPA"
    "Remove App Extensions"
    "Remove Watch App"
    "Run With Verbose Mode"
    "Set Custom Output Name"
    "Skip Encryption Check"
    )

    if [ "$os" == "iOS" ]; then
        arguements+=(
        "Do Not Update Outdated Apps"
        "Force Update Apps"
        "Decrypt Apps through Flexdecrypt"
        "Use APT instead of Parcility"
        "Don't Update APT Sources"
        )
    fi

    arguements+=( "Done" )
    select i in "${arguements[@]}"; do
        case "$i" in
            "Inject Tweaks")
                if [ -z "$files" ]; then while
                    printf 'Files or Tweak IDs: '
                    read -r tmp
                    files=( $tmp )
                    [ -z "$files" ] && echo "No Files Provided"
                do true; done; fi
                run=1
            ;;

            "Set Custom Output Name")
                if [ -z "$name" ]; then while
                    printf 'New Display Name: '
                    read -r name
                    [ -z "$name" ] && echo "No Display Name Provided"
                do true; done; fi
            ;;

            "Change Display Name")
                if [ -z "$displayname" ]; then while
                    printf 'New Display Name: '
                    read -r displayname
                    [ -z "$displayname" ] && echo "No Display Name Provided"
                do true; done; fi
                run=1
            ;;

            "Change App Version")
                if [ -z "$custom_version" ]; then while
                    printf 'New Version: '
                    read -r custom_version
                    [ -z "$custom_version" ] && echo "No Version Provided"
                do true; done; fi
                run=1
            ;;

            "Change BundleID")
                if [ -z "$bundle" ]; then while
                    printf 'New BundleID: '
                    read -r bundle
                    [ -z "$bundle" ] && echo "No BundleID Provided"
                do true; done; fi
                run=1
            ;;

            "Remove UISupportedDevices")
                remove_uisd=1
                run=1
            ;;

            "Use APT instead of Parcility")
                apt=1
                if [ -z "$root_password" ]; then
                    printf 'Root Password (Leave Empty for Default): '
                    read -r -s tmp
                    root_password="$tmp"
                fi
            ;;

            "Fakesign iPA")
                fakesign=1
                run=1
            ;;

            "Skip Encryption Check") ignore_encrypted=1 ;;
            "Do Not Update Outdated Apps") ignore_outdated=1 ;;
            "Don't Update APT Sources") no_apt_update=1 ;;
            "Force Update Apps") force_update=1 ;;
            "Decrypt Apps through Flexdecrypt") flexdecrypt=1 ;;
            "Run With Verbose Mode") verbose="-v" ;;

            "Remove Watch App")
                remove_watchapp=1
                run=1
            ;;

            "Remove App Extensions")
                remove_extensions=1
                run=1
            ;;

            "Done") break ;;
        esac
    done
fi

# VARIABLE CHECK
if ! [[ -n "$run" || -n "$drun" ]]; then
    echo "Insufficient Arguements"
    echo "Run "azule -h" for usage instructions"
    exit 1
fi

# SETTING OUTPUT DIRECTORY AND NAME
outdir="$(expand "$outdir")"
if [ ! -d "$outdir" ]; then
    if [ "${outdir: -4}" == ".ipa" ]; then
        output="$outdir"
    else
        if [ -z "$name" ]; then
            name="$(basename "$ipadir" .ipa)"
            for i in "${files[@]}"; do
                name+="+$(basename "$i")"
            done
        fi
        output="$outdir/$name.ipa"
    fi
else
    if [ -z "$name" ]; then
        name="$(basename "$ipadir")"
        for i in "${files[@]}"; do
            name+="+$(basename "$i")"
        done
    fi
    output="$outdir/$name.ipa"
fi

if [[ ${#output} -gt 264 ]]; then
    output="${output::${#output}-4}"
    characters_to_remove=$(( ${#output} - 264 ))
    output="${output::${#output}-$characters_to_remove}.ipa"
    Verbose "Shortened File Name" -a
fi
# CREATING OUTPUT DIRECTORY
mkdir -p "$(dirname "$output")"
test -w "$(dirname "$output")"
Verbose "iPA will be written to $output" "$output is an invalid output path" 9 -v -e

# CREATING .TMP DIRECTORIES
dir="$(mktemp -d)"

tweakid="$RANDOM"
mkdir -p "$dir/$tweakid/Tweak"
Verbose "$dir/$tweakid/Tweak has been created" "Couldn't create $dir/$tweakid/Tweak" 10 -v -e

cd "$dir/$tweakid" || exit

# DECRYPTION
if [ -n "$drun" ]; then

    # INSTALL APP UPDATES
    if [ "$ignore_outdated" != "2" ]; then

        # GET CURRENT VERSION
        while read -r i; do
            if [ "$(ExtractPlistValue MCMMetadataIdentifier "$i")" = "$ipadir" ]; then
                bfplist="$(find "$(dirname "$i")"/*.app/ -maxdepth 1 -name Info.plist)"
                currentv="$(ExtractPlistValue CFBundleVersion "$bfplist")"
                break
            fi
        done < <(find /var/containers/Bundle/Application -name .com.apple.mobile_container_manager.metadata.plist)

        if [ -n "$currentv" ]; then ignore_outdated+=1; fi
        if [[ "$latestv" != "$currentv" && "$ignore_outdated" != "11" ]] || [ -n "$force_update" ]; then

            # VARIABLE CHECK
            if [ -z "$appleid" ]; then while
                printf 'Apple ID: '
                read -r appleid
                [ -z "$appleid" ] && echo "No Apple ID Provided"
            do true; done; fi

            if [ -z "$appleid_password" ]; then while
                printf 'Password for Apple ID: '
                read -r -s appleid_password
                [ -z "$appleid_password" ] && echo "No Password Provided"
            do true; done; fi

            if ! ipatool-azule download -b "$ipadir" -e "$appleid" -p "$appleid_password"; then exit 1; fi
        
            appinst "$dir/$tweakid"/*.ipa
        fi
    fi

    while read -r i; do
        if [ "$(ExtractPlistValue MCMMetadataIdentifier "$i")" = "$ipadir" ]; then
            bfplist="$(find "$(dirname "$i")"/*.app/ -maxdepth 1 -name Info.plist)"
            bfbinary="$(dirname "$bfplist")/$(ExtractPlistValue CFBundleExecutable "$bfplist")"
            break
        fi
    done < <(find /var/containers/Bundle/Application -name .com.apple.mobile_container_manager.metadata.plist)

    if [ -n "$flexdecrypt" ]; then

        # FLEXDECRYPT

        Verbose "Preparing App..." -a
        mkdir -p Payload
        rsync -a "$(dirname "$bfplist")" Payload
        unzipped=1
    
        # REMOVING PLUGINS
        if [ -n "$remove_extensions" ]; then
            Verbose "Removing Extensions..." -a
            while read -r i; do rm -rf "$i"; done < <(find "$dir/$tweakid" -mindepth 3 -type d -name PlugIns)
            Verbose "Removed Extensions" "Couldn't Remove Extensions"
            remove_extensions=2
        fi

        Verbose "Removing Watch App..." -a
        find "$dir/$tweakid" -mindepth 3 -maxdepth 3 -type d -name Watch -exec rm -rf "{}" \;
        Verbose "Removed Watch App" "Couldn't Remove Watch App"
        remove_watchapp=2

        while read -r i; do
            CFBundleExecutable="$(ExtractPlistValue CFBundleExecutable "$i")"
            if [ -n "$CFBundleExecutable" ] && [ "$(otool -l "$(dirname "$i")/$CFBundleExecutable" | grep "cryptid 1")" ]; then
                if [ -z "$status" ]; then
                    Verbose "Decrypting App..." -a
                fi

                flexdecrypt "$(dirname "$i")/$CFBundleExecutable" --output "$(dirname "$i")/$CFBundleExecutable" &>/dev/null
                Verbose "Decrypted $CFBundleExecutable" "Couldn't Decrypt $CFBundleExecutable" -v
                status=0
            fi
        done < <(find Payload/*.app -name "Info.plist")
    
        Verbose "Decrypted App" "App Was Not Encrypted" -x 
    else
    
        # BFDECRYPT
        
        while read -r i; do
            CFBundleExecutable="$(ExtractPlistValue CFBundleExecutable "$i")"
            if [ -n "$CFBundleExecutable" ] && [ "$(otool -l "$(dirname "$i")/$CFBundleExecutable" | grep "cryptid 1")" ]; then
                if [[ "$(dirname "$i")/$CFBundleExecutable" =~ .app/Frameworks || "$(dirname "$i")/$CFBundleExecutable" == "$bfbinary" ]]; then
                    bfdecrypt=1
                    break
                fi
            fi
        done < <(find "$(dirname "$bfplist")" -name "Info.plist")

        if [ -n "$bfdecrypt" ]; then

            while read -r i; do
                if [ "$(ExtractPlistValue MCMMetadataIdentifier "$i")" = "$ipadir" ]; then
                    bfipadir="$(dirname "$i")/Documents/decrypted-app.ipa"
                    break
                fi
            done < <(find /var/mobile/Containers/Data/Application -mindepth 2 -maxdepth 2 -name .com.apple.mobile_container_manager.metadata.plist)

            # PRE CLEANUP
            find /var/mobile/Containers/Data/Application/ -name decrypted-app.ipa -exec rm -rf "{}" \; &>/dev/null

            # BFDECRYPT SETUP
            if ! [[ "$(ExtractPlistValue selectedApplications /var/mobile/Library/Preferences/com.level3tjg.bfdecrypt.plist key)" =~ $ipadir ]]; then
                cp /var/mobile/Library/Preferences/com.level3tjg.bfdecrypt.plist "$dir/$tweakid/bfbackup.plist"
                plutil -key selectedApplications -array /var/mobile/Library/Preferences/com.level3tjg.bfdecrypt.plist >/dev/null
                plutil -value "$ipadir" -arrayadd -key selectedApplications /var/mobile/Library/Preferences/com.level3tjg.bfdecrypt.plist >/dev/null
            fi

            # KILL APP
            PID=$(ps awwwx|grep "$bfbinary"|grep container|grep '.app'|grep -v grep|sed 's/^\ *//g'|cut -f1 -d\ )
            if [ -n "$PID" ]; then
                kill -9 "$PID"
            fi

            # LAUNCH APP
            open "$ipadir"

            # WAIT FOR IPA
            until [ -e "$bfipadir" ]; do :; done
            while [ -d "$(dirname "$bfipadir")/ipa" ]; do :; done

            # KILL APP
            PID=$(ps awwwx|grep "$bfbinary"|grep container|grep '.app'|grep -v grep|sed 's/^\ *//g'|cut -f1 -d\ )
            kill -9 "$PID" &>/dev/null

            # SET NEW IPADIR
            ipadir="$bfipadir"

            # CLEANUP
            if [ -e "$dir/$tweakid/bfbackup.plist" ]; then
                mv "$dir/$tweakid/bfbackup.plist" /var/mobile/Library/Preferences/com.level3tjg.bfdecrypt.plist
            fi
        else
            mkdir -p Payload
            rsync -a "$(dirname "$bfplist")" Payload
            unzipped=1
        fi
    fi
fi

# VERBOSE
if [[ -n "$unzipped" || -n "$bfipadir" ]]; then
    Verbose "Decrypted $ipadir" -a -v
else
    Verbose "Path to iPA is $ipadir" -a -v
fi

# EXTRACTING IPA
if [[ -n "$run" && -z "$unzipped" ]]; then
    Verbose "Extracting iPA..." -a
    unzip -q "$ipadir" -d "$dir/$tweakid"
    Verbose "IPA extracted" "Couldn't extract IPA" 11 -e
fi

if [ -z "$bfipadir" ]; then
    rm -rf "$bfipadir"
fi

# REMOVING PLUGINS
if [ "$remove_extensions" == "1" ]; then
    Verbose "Removing Extensions..." -a
    while read -r i; do
        rm -rf "$i"
    done < <(find "$dir/$tweakid" -mindepth 3 -type d -name PlugIns)
    Verbose "Removed Extensions" "Couldn't Remove Extensions"
fi

# REMOVING WATCH APP
if [ "$remove_watchapp" == "1" ] || [ -n "$bfipadir" ]; then
    Verbose "Removing Watch App..." -a
    find "$dir/$tweakid" -mindepth 3 -maxdepth 3 -type d -name Watch -exec rm -rf "{}" \;
    Verbose "Removed Watch App" "Couldn't Remove Watch App"
fi

# GETTING APP NAME
appname="$(basename Payload/*.app)"

# GETTING APP EXECUTABLE
executable="Payload/$appname/$(ExtractPlistValue CFBundleExecutable Payload/"$appname"/Info.plist)"
Verbose "App executable is $executable" "Couldn't set app executable" 12 -v -e
rpath="$(expand "$(otool -l "$executable" | grep RPATH -A2 | sed 's/.*path \(.*\)/\1/' | grep -o '^\S*' | grep "@executable_path*" | tail -1 | sed "s|@executable_path|Payload/$appname|g" 
)")"
Verbose "App rpath is $rpath" "Couldn't set app rpath" 13 -v -e

if ! [ -d "$rpath" ]; then
    mkdir -p "$rpath"
fi

# ENCRYPTION CHECK
if [ -z "$ignore_encrypted" ]; then
    while read -r i; do
        CFBundleExecutable="$(ExtractPlistValue CFBundleExecutable "$i")"
        if [ -n "$CFBundleExecutable" ] && [ -n "$(otool -l "$(dirname "$i")/$CFBundleExecutable" | grep "cryptid 1")" ]; then
            if [[ "$(dirname "$i")/$CFBundleExecutable" =~ .app/Frameworks || "$(dirname "$i")/$CFBundleExecutable" == "$executable" ]]; then
                Verbose "Fatal Error: $(dirname "$i")/$CFBundleExecutable is encrypted" 14 -a -k
            else
                Verbose "$(dirname "$i")/$CFBundleExecutable is encrypted. This may cause problems later on" -a -v
            fi
        fi
    done < <(find Payload/"$appname" -name "Info.plist")
fi

# PROCESSING FILES
if [ -n "$files" ]; then
    max="${#files[@]}"
    for i in "${!files[@]}"; do
        x="$i"
        unset string
        unset "indexes[@]"
        while [[ "$x" -le "$max" ]]; do
            indexes+=( "$x" )
            string+=" ${files[x]}"
            if [ -e "$(expand "$string")" ] && [[ -z "${files[x+1]}" || ! -e "$(expand "$string ${files[x+1]}")" ]]; then

                Verbose "$(expand "$string") will be imported" -a -v

                case "$(expand "$string")" in
                    *.deb) 
                        ExtractDEB "$(expand "$string")"
                    ;;
                    
                    *.dylib)
                        rsync -a "$(expand "$string")" "$dir/$tweakid/Tweak"
                        Verbose "Copied $(basename "$(expand "$string")") to work directory" "Couldn't Copy $(basename "$i") to work directory" 15 -v -e -i
                    ;;

                    *.framework)
                        rsync -a "$(expand "$string")" "$dir/$tweakid/Tweak"
                        Verbose "Copied $(basename "$(expand "$string")") to work directory" "Couldn't Copy $(basename "$i") to work directory" 15 -v -e -i
                    ;;

                    *)
                        rsync -a "$(expand "$string")" Payload/"$appname"
                        Verbose "Copied $(basename "$(expand "$string")") to app directory" "Couldn't Copy $(basename "$i") to app directory" 16 -e -i
                    ;;
                esac
                unset string
                for g in "${indexes[@]}"; do
                    unset "files[g]"
                done
                unset "indexes[@]"
            fi
            x=$((x + 1))
        done
    done
    
    # FETCHING DEBS
    if [ "$os" == "iOS" ] && [ -n "$apt" ]; then
            
        # SET ROOT PASSWORD
        if [ -z "$root_password" ]; then
            root_password="alpine"
        fi

        if [ -z "$no_apt_update" ]; then
            Verbose "Updating Sources..." -a
            echo "$root_password" | sudo -S apt-get update --allow-insecure-repositories &>/dev/null
            Verbose "Successfully Refreshed Sources" "Couldn't Refresh Sources"
        fi

        while read -r g; do echo "$root_password" | sudo -S rm -rf "$g"; done < <(find "/var/cache/apt/archives" -maxdepth 1 -iname '*.deb')

        if [ -n "$no_recurse" ]; then
            apt_packages=( "${files[@]}" )
        else
            for j in "${files[@]}"; do
                tmp=( $(apt-cache depends --recurse --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances "$j" | grep "^\w") )
                apt_or=( $(apt-cache depends --recurse --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances "$j" | grep -A1 "^ |" | grep ": " | cut -d: -f2 | xargs) )

                for o in "${!apt_or[@]}"; do
                    if [ -n "$(apt -qq list "${apt_or[o]}" 2>/dev/null)" ]; then
                        unset "apt_or[o]"
                        break
                    fi
                done
                rm_packages+=("${apt_or[@]}")
                for t in "${tmp[@]}"; do
                    if [[ "$t" == @(com.ex.substitute|org.coolstar.libhooker|mobilesubstrate|firmware) ]]; then
                        rm_packages+=( $(apt-cache depends --recurse --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances "$t" | grep "^\w") )
                    fi
                done
                apt_packages+=( ${tmp[@]} )
            done

            for q in "${!apt_packages[@]}"; do
                for z in "${!rm_packages[@]}"; do
                    if [ "${apt_packages[q]}" == "${rm_packages[z]}" ]; then
                        unset "apt_packages[q]"
                        unset "rm_packages[z]"
                        break
                    fi
                done
            done
        fi

        # DOWNLOADING PACKAGES
        for x in "${apt_packages[@]}"; do
            Verbose "Fetching $x" -a
            echo "$root_password" | sudo -S apt-get install "$x" -d -y --reinstall --allow-unauthenticated &>/dev/null
            Verbose "Fetched $x" "Couldn't Fetch $x" 17 -e -i
        done

        while read -r g; do
            ExtractDEB "$g"
            sudo -S rm -rf "$g"
        done < <(find "/var/cache/apt/archives" -maxdepth 1 -iname '*.deb')
        
    else
        for i in "${files[@]}"; do
            if [ "$(curl -sS https://api.parcility.co/db/package/"$i" | jq -r .status)" = "true" ]; then
                ExtractDEB "$i" fetch
            else
                if [ -z "$ignore_injectable_errors" ]; then 
                    Verbose "$i couldn't be found" 18 -a -k
                fi
            fi
        done
    fi

    # SPECIFYING DYLIBS
    while read -r i; do dylibs+=("$i"); done < <(find "$dir/$tweakid/Tweak" ! -type l -iname '*.dylib')

    # DYLIB SELECTION
    for i in "${dylibs[@]}"; do
        if ! [ -e "${i%.*}.plist" ]; then
            inject+=( "$(basename "$i")" )
            lib_dylibs+=( "$(basename "$i")" )
            rsync -a "$i" "$rpath"
            Verbose "Copied $(basename "$i") to app directory" "$(basename "$i") couldn't be copied to app directory" 16 -v -e
        else
            identifier="$(ExtractPlistValue Filter "${i%.*}".plist)"
            idtype="$(ExtractPlistValue Filter "${i%.*}".plist key)"

            case "$idtype" in
                Bundles)
                    ipabundleid="$(ExtractPlistValue CFBundleIdentifier Payload/"$appname"/Info.plist)"
                    
                    if [[ "$identifier" =~ $ipabundleid ]]; then
                        inject+=( "$(basename "$i")" )
                        rsync -a "$i" "$rpath"
                        Verbose "Copied $(basename "$i") to app directory" "$(basename "$i") couldn't be copied to app directory" 16 -v -e
                    fi
                ;;

                Executables)
                    if [[ "$identifier" =~ $(basename "$executable") ]]; then
                        inject+=( "$(basename "$i")" )
                        rsync -a "$i" "$rpath"
                        Verbose "Copied $(basename "$i") to app directory" "$(basename "$i") couldn't be copied to app directory" 16 -v -e
                    fi
                ;;
                
            esac
        fi
    done

    # MOVING FRAMEWORKS TO APP DIRECTORY
    while read -r i; do
        if [ -e "$i/Info.plist" ]; then
            rsync -a "$i" "$rpath"
            Verbose "Copied $(basename "$i") to app directory" "$(basename "$i") couldn't be copied to app directory" 16 -e
            inject+=( "$(basename "$i")/$(ExtractPlistValue CFBundleExecutable "$i/Info.plist")" )
            lib_dylibs+=( "$(basename "$i")/$(ExtractPlistValue CFBundleExecutable "$i/Info.plist")" )
        fi
    done < <(find "$dir/$tweakid/Tweak" ! -type l -iname '*.framework' ! -path '*PreferenceBundles/*' ! -path '*.bundle/*' ! -path '*.framework/*')

    # MOVING BUNDLES
    while read -r i; do
        rsync -a "$i" "$rpath"
        Verbose "Copied $(basename "$i") to app directory" "$(basename "$i") couldn't be copied to app directory" 16 -e
    done < <(find "$dir/$tweakid/Tweak" ! -type l -iname '*.bundle' ! -path '*PreferenceBundles/*' ! -path '*.bundle/*' ! -path '*.framework/*')

    # FIXING LINKS
    for i in "${inject[@]}"; do
        ldid -r -M "$rpath/$i" &>/dev/null
        Verbose "Codesign stripped from $i" "Couldn't strip codesign from $i" 19 -v -e 

        while read -r p; do links+=("$p"); done < <(otool -L "$rpath/$i" | sort -u | cut -d ' ' -f1)
        for l in "${links[@]}"; do
            for x in "${inject[@]}"; do
                if [[ "$l" =~ $x ]]; then
                    if [[ "$l" =~ $i ]]; then
                        install_name_tool -id @rpath/"$i" "$rpath/$i" &>/dev/null
                        tid=$(( tid + $? ))
                        break
                    else
                        install_name_tool -change "$l" @rpath/"$x" "$rpath/$i" &>/dev/null
                        if ! [[ "${linked[*]}" =~ $x ]]; then
                            linked+=( "$x" )
                        fi
                        tlnk=$(( tlnk + $? ))
                        break
                    fi
                fi
            done
        done
    done

    # VERBOSE
    status="$tid"
    if [ -n "$tid" ]; then
        Verbose "ID Successful" "$tid file(s) failed to ID" 20 -e -x
    fi

    status="$tlnk"
    if [ -n "$tlnk" ]; then
        Verbose "Re-Link Successful" "$tlnk Re-Links failed" 21 -e -x
    fi

    # INJECT HOOKING LIBRARY
    if [ -n "$inject" ]; then
        for hookinglibrary in "libsubstitute.dylib" "libsubstrate.dylib" "CydiaSubstrate.framework/CydiaSubstrate"; do
            for i in "${inject[@]}"; do
                while read -r q; do links+=("$q"); done < <(otool -L "$rpath/$i" | sort -u | cut -d ' ' -f1)
                for l in "${links[@]}"; do
                    if [[ "$l" =~ $hookinglibrary ]]; then
                        if [ ! -e "$rpath/$hookinglibrary" ]; then
                            if [[ "$hookinglibrary" =~ .framework ]]; then
                                hl_file="$(dirname "$hookinglibrary")"
                            else
                                hl_file="$hookinglibrary"
                            fi

                            if [ "$os" == "iOS" ]; then
                                rsync -a "/var/mobile/Azule/lib/$hl_file" "$rpath"
                            elif ! rsync -a "$AZULE/lib/$hl_file" "$rpath" &>/dev/null; then
                                Verbose "$hl_file not downloaded, please run setup-azule." 22 -a -k
                            fi
                        fi
                        install_name_tool -change "$l" @rpath/"$hookinglibrary" "$rpath/$i" &>/dev/null
                        status=$(( status + $? ))
                        break
                    fi
                done
            done
        done
        if [ -n "$status" ]; then
            Verbose "Successfully injected $hookinglibrary" "Failed injecting $hookinglibrary in $status file(s)" 23 -e -x
        fi
    fi
    
    for l in "${linked[@]}"; do
        if [[ "${lib_dylibs[*]}" =~ $l ]]; then
            for i in "${!inject[@]}"; do
                if [ "$l" == "${inject[i]}" ]; then
                    unset "inject[i]"
                fi
            done
        fi
    done

    # INJECTING LIBRARIES
    while read -r p; do exec_dylibs+=("$p"); done < <(otool -L "$executable" | cut -d ' ' -f1)

    for i in "${inject[@]}"; do
        for l in "${exec_dylibs[@]}"; do
            if [[ "$l" =~ /"$i" ]]; then
                dont_inject=1
                break
            fi
        done

        if [ -z "$dont_inject" ]; then 
            insert_dylib --inplace --weak --no-strip-codesig @rpath/"$i" "$executable" &> /dev/null
            Verbose "Injected $i" "Couldn't inject $i" 24 -e
        else
            unset dont_inject
        fi
    done
fi

# REMOVING UISUPPORTEDDEVICES

if [ -n "$remove_uisd" ]; then
    UISupportedDevices="$(ExtractPlistValue UISupportedDevices Payload/"$appname"/Info.plist)"
    if [ -n "$UISupportedDevices" ]; then
        RemovePlistKey UISupportedDevices Payload/"$appname"/Info.plist
        Verbose "Removed UISupportedDevices from app" "Couldn't remove UISupportedDevices from app"
    else
        Verbose "The specified iPA doesn't have UISupportedDevices" -a
    fi
fi

# CHANGING BUNDLEID

if [ -n "$bundle" ]; then
    ReplacePlistValue "$bundle" CFBundleIdentifier Payload/"$appname"/Info.plist
    Verbose "Changed App BundleID to $bundle" "Couldn't Change App BundleID"
fi

# CHANGING DISPLAY NAME

if [ -n "$displayname" ]; then
    ReplacePlistValue "$displayname" CFBundleDisplayName Payload/"$appname"/Info.plist
    Verbose "Changed App Display Name to $displayname" "Couldn't Change App Display Name"
fi

# CHANGING VERSION

if [ -n "$custom_version" ]; then
    ReplacePlistValue "$custom_version" CFBundleVersion Payload/"$appname"/Info.plist
    ReplacePlistValue "$custom_version" CFBundleShortVersionString Payload/"$appname"/Info.plist
    Verbose "Changed App Version to $custom_version" "Couldn't Change App Version"
fi

# FAKESIGNING

if [ -n "$fakesign" ]; then
    Verbose "Fakesigning iPA..." -a
        while read -r i; do
            ldid -S -M "$i"
            Verbose "Fakesigned $(basename "$i")" "Couldn't Fakesign $(basename "$i")" -v
        done < <(find Payload -type f ! -name "*.*" ! -name "CodeResources" ! -name PkgInfo)
    Verbose "Fakesigned iPA" "Couldn't Fakesign iPA"
fi

# WRAPPING UP
if [ -e "$output" ]; then
    rm -rf "$output"
fi

if [ -n "$run" ] || [ -n "$unzipped" ]; then
    Verbose "Generating iPA..." -a
    zip -rq "$output" Payload
    status="$?"
else
    mv "$ipadir" "$output"
    status="$?"
fi
Verbose "Generated IPA at $output" "Couldn't generate IPA" 25 -x 

exit_code=0

cleanup
