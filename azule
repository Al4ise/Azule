#!/bin/bash

# PLATFORM SPECIFIC
case $(uname) in
    Darwin)
        if [[ "$(uname -m)" == arm64 || "$(uname -m)" == x86_64 ]]; then
            jq="$AZULE/usr/bin/jq"
            insert_dylib="$AZULE/usr/bin/insert_dylib"
            plutil="plutil"
            ar="ar"
            otool="otool"
            install_name_tool="install_name_tool"
            ldid="$AZULE/usr/bin/ldid"
            azule="$AZULE"
        else
            jq="jq"
            insert_dylib="insert_dylib"
            plutil="plutil"
            ar="ar"
            otool="otool"
            install_name_tool="install_name_tool"
            ldid="ldid"
            azule="/var/mobile/Documents/Azule"
        fi
    ;;
    
    Linux)
        jq="jq"
        insert_dylib="$AZULE/usr/bin/insert_dylib_linux"
        plutil="$AZULE/usr/bin/plutil"
        ar="$AZULE/toolchain/usr/bin/ar"
        otool="$AZULE/toolchain/usr/bin/otool"
        install_name_tool="$AZULE/toolchain/usr/bin/install_name_tool"
        ldid="$AZULE/toolchain/usr/bin/ldid"
        azule="$AZULE"
    ;;
esac


# CLEAN ON EXIT
trap "rm -rf $azule/.tmp && exit" SIGINT

# ARGUEMENTS
while getopts :n:i:o:c:f:d:huSmeCv args; do
    case "$args" in
        n)
            name="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                name+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
            ;;
            
        i)
            ipadir="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                ipadir+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
            ;;
            
        o)
            outdir="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                outdir+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
            ;;
            
        c)
            c="$OPTARG"
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                c+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
            ;;
            
        f)
            files=("$OPTARG")
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                files+=($(eval "echo \${$OPTIND}"))
                OPTIND=$((OPTIND + 1))
            done
            ;;
            
        d)
            inject=("$OPTARG")
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                inject+=($(eval "echo \${$OPTIND}"))
                OPTIND=$((OPTIND + 1))
            done
            ;;
            
        u) u=1 ;;
        
        v) v=1 ;;
        
        m) m=1 ;;
        
        C) C=1 ;;
        
        e) e=1 ;;

        S) fakesign=1 ;;
                
        h)
            echo "Usage: azule [options]"
            echo
            echo "Running the command without any arguments will enter 'GUI' mode"
            echo
            echo "GUI mode usage: "
            echo "  1. Run azule in any terminal window to initialize"
            echo "  2. Provide the path to a \u001b[1mdecrypted\u001b[0m IPA of the app you are trying to modify."
            echo "  \u001b[1mEncrypted IPAs don't work\u001b[0m"
            echo "  3. When asked for Files or Tweak Bundle IDs, you can either provide the local"
            echo "  paths to the files you wish to inject or type the Bundle IDs of the tweaks"
            echo "  (This only works if the tweaks can be found on Parcility)"
            echo "  4. If you provided a tweak, choose the tweak files to inject"
            echo
            echo "Options:"
            echo "  -n [Name]                Specify an Output Name"
            echo "  -i [Path]                Specify the path to the IPA to patch"
            echo "  -o [Path]                Specify an output directory"
            echo "  -f [Paths/Bundle IDs]    Specify the files or tweak Bundle IDs to import"
            echo "  -d [Names]               From the .deb files imported, specify the names of the dylibs (e.g: Foo.dylib) to inject"
            echo "  -c [Version]             Set custom version for output ipa"
            echo "  -h                       Print this help menu"
            echo "  -u                       Remove UISupportedDevices from Info.plist"
            echo "  -v                       Enable Verbose Mode"
            echo "  -m                       Enables the manual dylib selection 'UI'"
            echo "  -C                       Disables Aatomatic cleanup"
            echo "  -s                       Fakesigns iPA for use with AppSync"
            echo "  -e                       Removes App Extensions"
            echo
            echo "Examples:"
            echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f ~/Foo.dylib ~/Foo.bundle"
            echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f com.bar.foo -d Foo.dylib"
            echo "  azule -n Foo -i ~/Foo.ipa -o ~/Foo/ -f ~/Foo.framework com.bar.foo -d Foo.dylib"
            exit 1
            ;;
        *)
            echo 'Invalid argument. Run "azule -h" to print the help menu.'
            exit 1
            ;;
    esac
done

# GET IPA
if [ -z "$ipadir" ]; then while
    printf 'Path to IPA: '
    read ipa
    ipadir=$(eval "echo \$ipa")
    [ -z "$ipadir" ] && echo "I need the IPA to make your app."
do true; done; fi

# VERBOSE
if [ -n "$v" ]; then
    if [ -f "$ipadir" ]; then
        echo "Path to IPA is $ipadir"
    else
        echo "Invalid Path to IPA"
    fi
fi

# GET FILES
if [ -z "$files" ]; then while
    printf 'Files or Tweak IDs: '
    read ff
    files=( $(eval "echo $ff") )
    [ -z "$files" ] && echo "If you don't want to inject anything, then just use the IPA you gave me."
do true; done; fi

# VERBOSE
if [ -n "$v" ]; then
    for i in "${files[@]}"; do
        echo "$i will be imported"
    done
fi

# DECLARE $NAME
if [ -z "$name" ]; then
    name="$(basename "$ipadir")"
    for i in "${files[@]}"; do
        name+="+"$(basename "$i")""
    done
fi

# VERBOSE
if [ -n "$v" ]; then
    if [ -n "$name" ]; then
        echo "Output Name is $name"
    else
        echo "$name is an invalid output name"
    fi
fi

# OUTPUT DIRECTORY
if [ -z "$outdir" ]; then while
    printf 'Output Directory: '
    read out
    outdir=$(eval "echo $out")
    [ -z "$outdir" ] && echo "I don't want to keep the app for myself."
do true; done; fi

tweakname=$(basename "$name")
output=$(echo "$outdir/$name" | sed "s/\(.*\)"$tweakname"\(.*\)/\1\2/")
mkdir -p "$output"
    
# VERBOSE
if [ -n "$v" ]; then
    if [ -d "$output" ]; then
        echo "Output Directory is $output"
    else
        echo "$output is an invalid output directory"
    fi
fi

# .TMP DIRECTORIES
dir="$azule/.tmp"
mkdir -p "$dir/$tweakname/Tweak"
mkdir -p "$dir/$tweakname/Custom"
cd "$dir/$tweakname"

# VERBOSE
if [ -n "$v" ]; then
    if [[ -d "$dir/$tweakname/Tweak" && -d "$dir/$tweakname/Custom" ]]; then
        echo "Work directories have been created"
    else
        echo "Couldn't create work directories"
    fi
fi

# EXTRACT IPA
echo "Extracting iPA..."
eval "unzip -q '$ipadir' -d "$dir/'$tweakname'""

if [ -d "$dir/$tweakname/Payload" ]; then
    echo "IPA extracted"
else
    echo "Couldn't extract IPA"
fi

if [ -n "$e" ]; then
    echo "Removing Extensions..."
    rm -rf Payload/*.app/Plugins
    tv="$?"
    if [ "$tv" = 0 ]; then
        echo "Removed Extensions"
    else
        echo "Couldn't Remove Extensions"
    fi
fi

executable="Payload/$(basename Payload/*.app)/$("$plutil" -extract CFBundleExecutable xml1 -o - Payload/*.app/Info.plist | sed -n "s/.*<string>\(.*\)<\/string>.*/\1/p")"

# VERBOSE
if [ -n "$v" ]; then
    if [[ "$executable" == "Payload/"*".app/"?* ]]; then
        echo "App executable is $executable"
    else
        echo "Couldn't set app executable"
    fi
fi

for i in "${files[@]}"; do
    if [[ -f "$i" || -d "$i" ]]; then
        case "$i" in
            *.deb)
                mkdir -p ar
                cd ar
                "$ar" -x "$i"
                tar -C "$dir/$tweakname/Tweak" -xf data.tar.*
                tv="$?"
                
                if [ "$tv" = 0 ]; then
                    echo "$(basename "$i") extracted"
                else
                    echo "Failed to extract $(basename "$i")"
                fi
            
                cd "$dir/$tweakname"
                rm -rf ar
            ;;
            
            *.dylib)
                rsync -a "$i" "$dir/$tweakname/Custom"
                tv="$?"
                
                if [ -n "$v" ]; then
                    if [ "$tv" = 0 ]; then
                        echo "Copied "$(basename "$i")" to work directory"
                    else
                        echo "Couldn't Copy "$(basename "$i")" to work directory"
                    fi
                fi
                
                inject+=( $(basename "$i") )
            ;;

            *.framework)
                rsync -a "$i" Payload/*.app/Frameworks
                tv="$?"
                
                if [ "$tv" = 0 ]; then
                    echo "Moved $i to app directory"
                else
                    echo "Couldn't Move $i to app directory"
                fi
                
                inject+=( "$(basename "$i")/$("$plutil" -extract CFBundleExecutable xml1 -o - "$i"/Info.plist | sed -n "s/.*<string>\(.*\)<\/string>.*/\1/p")" )
            ;;
            
            *) rsync -a "$i" Payload/*.app
                tv="$?"
                
                if [ "$tv" = 0 ]; then
                    echo "Moved $i to app directory"
                else
                    echo "Couldn't Move $i to app directory"
                fi
            ;;
        esac
    else
        if [ "$(curl -sS https://api.parcility.co/db/package/"$i" | "$jq" -r .status)" = "true" ]; then
            mkdir -p ar
            cd ar
            echo "Fetching $i..."
            curl -sSL "$(curl -sS https://api.parcility.co/db/package/$i | "$jq" -r '.data.repo.url + .data.builds[-1].Filename')" -o "$i.deb"
            
            if [ -f "$i.deb" ]; then
                echo "Fetched "$i""
            else
                echo "Couldn't fetch $i"
            fi
            echo "Extracting $i..."
            "$ar" -x "$i.deb"
            tar -C "$dir/$tweakname/Tweak" -xf data.tar.*
            tv="$?"
            
            if [ "$tv" = 0 ]; then
                echo "Extracted $(basename "$i")"
            else
                echo "Failed to extract $(basename "$i")"
            fi
            
            cd "$dir/$tweakname"
            rm -rf ar
        else
            echo "$i isn't available on Parcility. Try getting the files manually. "
            exit
        fi
    fi
done

# SPECIFY DYLIBS
if [ -n "$m" ]; then
    if [ -n "$(ls -A "$dir/$tweakname/Tweak" 2>/dev/null)" ]; then
        export COLUMNS=1
        dylibs=( $(find "$dir/$tweakname/Tweak" -iname '*.dylib' -exec basename {} \;) 'Done' )
        echo $'Available Dylibs: '
        PS3=$'Choose Dylibs (recommended): '
        select i in "${dylibs[@]}"; do
            if [ "$i" = "Done" ]; then break
            else
                inject+=( "$i" )
            fi
        done
    else
        echo "No dylibs available"
        pause
    fi
else
    dylibs=( $(find "$dir/$tweakname/Tweak" -iname '*.dylib') )

    for i in "${dylibs[@]}"; do
        if [[ "$i" =~ "$dir/$tweakname/Tweak/usr/lib/" ]]; then
            inject+=( "$(basename "$i")" )
        else
            identifier="$("$plutil" -extract Filter xml1 -o - "${i%.*}.plist" | sed -n "s/.*<string>\(.*\)<\/string>.*/\1/p")"
            idtype="$("$plutil" -extract Filter xml1 -o - "${i%.*}.plist" | sed -n "s/.*<key>\(.*\)<\/key>.*/\1/p")"
            
            case "$idtype" in
                Bundles)
                   ipabundleid="$("$plutil" -extract CFBundleIdentifier xml1 -o - Payload/*.app/Info.plist | sed -n "s/.*<string>\(.*\)<\/string>.*/\1/p")"
                    
                    if [[ "$identifier" =~ "$ipabundleid" ]]; then
                        inject+=( "$(basename "$i")" )
                    fi
                ;;
            
                Executables)
                    if [[ "$identifier" =~ "$(basename "$executable")" ]]; then
                        inject+=( "$(basename "$i")" )
                    fi
                ;;
                
            esac
        fi
    done
fi

# INJECT DYLIBS
for i in "${inject[@]}"; do
    find "$dir/$tweakname/Tweak" "$dir/$tweakname/Custom" -iname "$i" -exec rsync -a {} Payload/*.app/Frameworks \;
    tv="$?"
    if [ "$tv" = 0 ]; then
        echo "Copied "$(basename "$i")" to app directory"
    else
        echo ""$(basename "$i")" couldn't be copied to app directory"
    fi
        
    "$insert_dylib" --inplace --all-yes "@rpath/$i" "$executable" &> /dev/null
    tv="$?"
    
    if [ "$tv" = 0 ]; then
        echo "Injected $i"
    else
        echo "Couldn't inject $i)"
    fi
done

# MOVE BUNDLES
find "$dir/$tweakname/Tweak" -iname '*.bundle' ! -path '*.bundle/*' ! -path '*.framework/*'  | while read i; do
    rsync -a "$i" Payload/*.app/
    tv="$?"
    
    if [ "$tv" = 0 ]; then
        echo "Copied "$(basename "$i")" to app directory"
    else
        echo ""$(basename "$i")" couldn't be copied to app directory"
    fi
done

# FIX LINKS
rsync -a "$azule"/CydiaSubstrate.framework Payload/*.app/Frameworks
tv="$?"
if [ "$tv" = 0 ]; then
    echo "Copied CydiaSubstrate.framework to app directory"
else
    echo "CydiaSubstrate.framework couldn't be copied to app directory"
fi
    
inject+=( CydiaSubstrate.framework/CydiaSubstrate )

while read i; do
    rsync -a "$i" Payload/*.app/Frameworks
    tv="$?"
    
    if [ "$tv" = 0 ]; then
        echo "Copied $(basename "$i") to app directory"
    else
        echo "$(basename "$i") couldn't be copied to app directory"
    fi
    inject+=( "$(basename "$i")/$("$plutil" -extract CFBundleExecutable xml1 -o - "$i/Info.plist" | sed -n "s/.*<string>\(.*\)<\/string>.*/\1/p")" )
done < <(find "$dir/$tweakname/Tweak" -iname '*.framework')

for i in "${inject[@]}"; do
    "$ldid" -r Payload/*.app/Frameworks/"$i"
    tv="$?"
    
    # VERBOSE
    if [ -n "$v" ]; then
        if [ "$tv" = 0 ]; then
            echo "Codesign stripped from $i"
        else
            echo "Couldn't strip codesign from $i"
        fi
    fi
    
    links=( $("$otool" -L Payload/*.app/Frameworks/"$i" | cut -d ' ' -f1 | sort -u) )
    for l in "${links[@]}"; do
        for x in "${inject[@]}"; do
            if [[ "$l" =~ "$x" ]]; then
                if [[ "$l" =~ "$i" ]]; then
                    "$install_name_tool" -id @rpath/"$i" Payload/*.app/Frameworks/"$i" &>/dev/null
                    tid=$(( $tid + $? ))
                    break
                else
                    "$install_name_tool" -change "$l" @rpath/"$x" Payload/*.app/Frameworks/"$i" &>/dev/null
                    tlnk=$(( $tlnk + $? ))
                    break
                fi
            fi
        done
    done
done

if [ "$tid" = 0 ]; then
    echo "ID Successful"
else
    echo "$tid files failed to ID"
fi

if [ "$tlnk" = 0 ]; then
    echo "Re-Link Successful"
else
    echo "$tlnk Re-Links failed"
fi

if [ -n "$u" ]; then
    UISupportedDevices="$("$plutil" -extract CFBundleIdentifier xml1 -o - Payload/*.app/Info.plist | sed -n "s/.*<string>\(.*\)<\/string>.*/\1/p")"
    
    if [ -n "$UISupportedDevices" ]; then
        "$plutil" -remove UISupportedDevices Payload/*.app/Info.plist
        tv="$?"
    
        if [ "$tv" = 0 ]; then
            echo "Removed UISupportedDevices from app"
        else
            echo "Couldn't remove UISupportedDevices from app"
        fi
    else
        echo "The specified iPA doesn't have UISupportedDevices"
    fi
fi

if [ -n "$c" ]; then
    "$plutil" -replace CFBundleVersion -string "$c" Payload/*.app/Info.plist >> /dev/null
    tv="$?"
    
    if [ "$tv" = 0 ]; then
        echo "Changed CFBundleVersion to $c"
    else
        echo "Couldn't change CFBundleVersion to $c"
    fi
    
    "$plutil" -replace CFBundleShortVersionString -string "$c" Payload/*.app/Info.plist >> /dev/null
    tv="$?"
    
    if [ "$tv" = 0 ]; then
        echo "Changed CFBundleShortVersionString to $c"
    else
        echo "Couldn't change CFBundleShortVersionString to $c"
    fi
fi

# FAKESIGNING
if [ -n "$fakesign" ]; then
    if [ -n "$v" ]; then
        echo "Fakesigning iPA..."
    fi
    "$ldid" -S -M Payload/* &>/dev/null
    tv="$?"
    if [ "$tv" != 0 ]; then
        echo "Couldn't Fakesign iPA"
    fi
fi

if [ "$tv" = 0 ]; then
    echo "Fakesigned iPA"
fi

# WRAPPING UP
eval "zip -rqX '$output$tweakname.ipa' Payload"
tv="$?"

if [ "$tv" = 0 ]; then
    echo "Generated IPA at "$output$tweakname.ipa""
else
    echo "Couldn't generate IPA"
fi

if [ -z "$C" ]; then
    rm -rf "$dir"
    tv="$?"
    
    # VERBOSE
    if [ -n "$v" ]; then
        if [ "$tv" = 0 ]; then
            echo "Cleaned up"
        else
            echo "Couldn't clean up"
        fi
    fi
fi
