#!/bin/zsh

# CHECK IF BREW EXISTS
which -s brew >> /dev/null
if [[ $? != 0 ]] ; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

# CHECK IF ADDITIONAL REQUIREMENTS EXIST
dependencies=('jq' 'dpkg')
for i in "${dependencies[@]}"; do
    which -s "$i" >> /dev/null
    if [[ $? != 0 ]] ; then
    brew install "$i"
    fi
done

# CHECK IF XCODE CLI UTILS EXIST
xcode-select -p 1>/dev/null
if [ $? != 0 ]; then
    xcode-select --install
fi

which -s insert_dylib >> /dev/null
if [[ $? != 0 ]] ; then
    curl -sL -o /usr/local/bin/insert_dylib "$(curl -s https://api.github.com/repos/Al4ise/insert_dylib/releases/latest | jq -r '.assets[].browser_download_url')"
    chmod +x /usr/local/bin/insert_dylib
fi

mkdir -p /Library/azule
cd /Library/azule

while getopts ":fh" args; do
    case "$args" in
        f) git reset --hard HEAD >> /dev/null ;;
        
        h)
            echo "Usage: update-azule [options]"
            echo
            echo "Running the command without any arguments will update Azule normally. If"
            echo "you have made changes to any of Azule's files, the update will be cancelled."
            echo
            echo "Options:"
            echo "  -f     Forcefully update Azule, causing all local changes to be lost."
            echo "  -h     Print this help menu."
            exit 1
            ;;
            
        *)
        
            echo 'Invalid argument. Run "update-azule -h" to print the help menu.'
            exit 1
            ;;
    esac
done

git pull -q

chmod +x azule
chmod +x Install
chmod +x Uninstall

# UPDATE-AZULE GLOBAL COMMAND
if [ ! -f /usr/local/bin/update-azule ]; then
    ln -s /Library/azule/Install /usr/local/bin/update-azule
fi

# AZULE GLOBAL COMMAND
if [ ! -f /usr/local/bin/azule ]; then
    ln -s /Library/azule/azule /usr/local/bin/azule
fi

# REMOVE OLD SUBSTRATE
if [ -d CydiaSubstrate.framework ]; then
    rm -rf CydiaSubstrate.framework
fi

# INSTALL SUBSTRATE
mkdir -p ~/azule/.tmp
cd .tmp
curl -s -Lo substrate.deb "$(curl -s 'https://api.parcility.co/db/package/mobilesubstrate/saurik' | jq -r '.data.repo.url + .data.builds[-1].Filename')"
ar -x substrate.deb data.tar.lzma
tar -C /Library/azule --lzma --strip-components 3 -xf data.tar.lzma ./Library/Frameworks/CydiaSubstrate.framework
plutil -convert binary1 "/Library/azule/CydiaSubstrate.framework/Info.plist" || true
rm -rf "/Library/azule/CydiaSubstrate.framework/Libraries" "/Library/azule/CydiaSubstrate.framework/Commands"

# CLEANUP
rm -rf /Library/azule/.tmp
